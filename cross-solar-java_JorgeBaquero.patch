From 8b99a069a472a26301d37074f1af9fdba416b2bd Mon Sep 17 00:00:00 2001
From: Jorge Baquero <baquerojorge@gmail.com>
Date: Wed, 31 Oct 2018 21:12:44 -0500
Subject: [PATCH] My submission
XOV: XO_0_0_1

---
 Readme.txt                                    |    2 +
 private/cache/retriever/catalog.xml           |    6 +
 .../xml/ns/dbchangelog/dbchangelog-3.4.xsd    | 1234 ++++++++++++++++
 .../xml/ns/dbchangelog/dbchangelog-3.5.xsd    | 1285 +++++++++++++++++
 .../xml/ns/dbchangelog/dbchangelog-ext.xsd    |    7 +
 .../techtrial/controller/PanelController.java |  154 +-
 .../techtrial/dto/DailyElectricity.java       |   24 +-
 .../com/crossover/techtrial/model/Panel.java  |    9 +
 .../HourlyElectricityRepository.java          |   12 +
 .../techtrial/repository/PanelRepository.java |    1 +
 .../service/HourlyElectricityService.java     |    9 +
 .../service/HourlyElectricityServiceImpl.java |   37 +-
 .../techtrial/service/PanelService.java       |    2 +
 .../techtrial/service/PanelServiceImpl.java   |    4 +
 .../techtrial/validation/PanelValidator.java  |   33 +
 src/main/resources/application.properties     |    6 +-
 .../db/changelog/db.changelog-1.1.xml         |   40 +
 .../db/changelog/db.changelog-master.xml      |    2 +-
 .../controller/PanelControllerTest.java       |  116 +-
 19 files changed, 2898 insertions(+), 85 deletions(-)
 create mode 100644 private/cache/retriever/catalog.xml
 create mode 100644 private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd
 create mode 100644 private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
 create mode 100644 private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd
 create mode 100644 src/main/java/com/crossover/techtrial/validation/PanelValidator.java
 create mode 100644 src/main/resources/db/changelog/db.changelog-1.1.xml

diff --git a/Readme.txt b/Readme.txt
index 91be5e0..b72e62f 100644
--- a/Readme.txt
+++ b/Readme.txt
@@ -10,6 +10,8 @@ Tasks:
 	2)	Find bugs and fix them, hint: we provided Cross-Solar application in a good structure, so no need to spend your valuable time on structure modifications,  just focus on fixing bugs.
 	3) 	Frontend team wants to display panelâ€™s all historical data in a chart, in which each point represents electricity generated by this panel each day [sum, min, max, average] up to the end of previous day , your goal is to implement backend part of this task, API specifications already there in code as agreed with Frontend team, and it is ok to implement this task without any optimization.
 
+select sum(generated_electricity), min(generated_electricity), max(generated_electricity), avg(generated_electricity), date(reading_at) from hourly_electricity group by date(reading_at);
+
 Prerequisites:
 	Any IDE
 	Java 8
diff --git a/private/cache/retriever/catalog.xml b/private/cache/retriever/catalog.xml
new file mode 100644
index 0000000..b73dc0b
--- /dev/null
+++ b/private/cache/retriever/catalog.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog" prefer="system">
+    <system systemId="http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd" uri="www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"/>
+    <system systemId="http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd" uri="www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd"/>
+    <system systemId="http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd" uri="www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd"/>
+</catalog>
\ No newline at end of file
diff --git a/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd b/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd
new file mode 100644
index 0000000..c0d894e
--- /dev/null
+++ b/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd
@@ -0,0 +1,1234 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+            targetNamespace="http://www.liquibase.org/xml/ns/dbchangelog"
+            xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+            elementFormDefault="qualified">
+
+    <xsd:simpleType name="propertyExpression" id="propertyExpression">
+        <xsd:restriction base="xsd:string">
+            <xsd:pattern value="$\{[\w\.]+\}"/>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="booleanExp" id="booleanExp">
+        <xsd:annotation>
+            <xsd:appinfo>
+                <xsd:documentation>Extension to standard XSD boolean type to allow ${} parameters</xsd:documentation>
+            </xsd:appinfo>
+        </xsd:annotation>
+        <xsd:union>
+            <xsd:simpleType>
+                <xsd:restriction base="xsd:boolean"/>
+            </xsd:simpleType>
+            <xsd:simpleType>
+                <xsd:restriction base="propertyExpression"/>
+            </xsd:simpleType>
+        </xsd:union>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="integerExp" id="integerExp">
+        <xsd:annotation>
+            <xsd:appinfo>
+                <xsd:documentation>Extension to standard XSD integer type to allow ${} parameters</xsd:documentation>
+            </xsd:appinfo>
+        </xsd:annotation>
+        <xsd:union>
+            <xsd:simpleType>
+                <xsd:restriction base="xsd:integer"/>
+            </xsd:simpleType>
+            <xsd:simpleType>
+                <xsd:restriction base="propertyExpression"/>
+            </xsd:simpleType>
+        </xsd:union>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="onChangeSetPreconditionErrorOrFail">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="HALT"/>
+            <xsd:enumeration value="WARN"/>
+            <xsd:enumeration value="CONTINUE"/>
+            <xsd:enumeration value="MARK_RAN"/>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="onChangeLogPreconditionErrorOrFail">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="HALT"/>
+            <xsd:enumeration value="WARN"/>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="onChangeLogPreconditionOnSqlOutput">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="TEST"/>
+            <xsd:enumeration value="FAIL"/>
+            <xsd:enumeration value="IGNORE"/>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="onChangeSetValidationFail">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="HALT"/>
+            <xsd:enumeration value="MARK_RAN"/>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="objectQuotingStrategy">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="LEGACY"/>
+            <xsd:enumeration value="QUOTE_ALL_OBJECTS"/>
+            <xsd:enumeration value="QUOTE_ONLY_RESERVED_WORDS"/>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <!-- This is the main (root) part of the xsd -->
+    <xsd:element name="databaseChangeLog">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="property" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="file" type="xsd:string"/>
+                        <xsd:attribute name="name" type="xsd:string"/>
+                        <xsd:attribute name="value" type="xsd:string"/>
+                        <xsd:attribute name="dbms" type="xsd:string"/>
+                        <xsd:attribute name="context" type="xsd:string"/>
+                        <xsd:attribute name="labels" type="xsd:string"/>
+                        <xsd:attribute name="global" type="xsd:boolean"/>
+                    </xsd:complexType>
+                </xsd:element>
+
+                <xsd:element name="preConditions" minOccurs="0" maxOccurs="1">
+                    <xsd:complexType>
+                        <xsd:choice>
+                            <xsd:group ref="PreConditionChildren" maxOccurs="unbounded"/>
+                        </xsd:choice>
+                        <xsd:attribute name="onFailMessage" type="xsd:string"/>
+                        <xsd:attribute name="onErrorMessage" type="xsd:string"/>
+                        <xsd:attribute name="onFail" type="onChangeLogPreconditionErrorOrFail"/>
+                        <xsd:attribute name="onError" type="onChangeLogPreconditionErrorOrFail"/>
+                        <xsd:attribute name="onSqlOutput" type="onChangeLogPreconditionOnSqlOutput"/>
+                    </xsd:complexType>
+                </xsd:element>
+
+                <xsd:choice minOccurs="0" maxOccurs="unbounded">
+                    <xsd:element name="changeSet" minOccurs="0" maxOccurs="unbounded">
+                        <xsd:complexType>
+                            <xsd:sequence>
+                                <xsd:element name="validCheckSum" minOccurs="0" maxOccurs="unbounded">
+                                    <xsd:complexType mixed="true">
+                                        <xsd:sequence>
+                                            <xsd:element ref="comment" minOccurs="0" maxOccurs="1"/>
+                                        </xsd:sequence>
+                                    </xsd:complexType>
+                                </xsd:element>
+                                <xsd:element name="preConditions" minOccurs="0" maxOccurs="1">
+                                    <xsd:annotation>
+                                        <xsd:appinfo>
+                                            <xsd:documentation>onChangeLogPreconditionOnSqlOutput determines what should happen when evaluating this precondition in updateSQL mode. TEST: Run precondition, FAIL: Fail precondition,
+                                                IGNORE: Skip precondition check [DEFAULT]
+                                            </xsd:documentation>
+                                        </xsd:appinfo>
+                                    </xsd:annotation>
+                                    <xsd:complexType>
+                                        <xsd:choice>
+                                            <xsd:group ref="PreConditionChildren" maxOccurs="unbounded"/>
+                                        </xsd:choice>
+                                        <xsd:attribute name="onFailMessage" type="xsd:string"/>
+                                        <xsd:attribute name="onErrorMessage" type="xsd:string"/>
+                                        <xsd:attribute name="onFail" type="onChangeSetPreconditionErrorOrFail"/>
+                                        <xsd:attribute name="onError" type="onChangeSetPreconditionErrorOrFail"/>
+                                        <xsd:attribute name="onSqlOutput" type="onChangeLogPreconditionOnSqlOutput"/>
+                                    </xsd:complexType>
+                                </xsd:element>
+                                <xsd:choice>
+                                    <xsd:element ref="tagDatabase" maxOccurs="1"/>
+                                    <xsd:group ref="changeSetChildren" minOccurs="0" maxOccurs="unbounded"/>
+                                </xsd:choice>
+
+                                <xsd:element name="modifySql" minOccurs="0" maxOccurs="unbounded">
+                                    <xsd:complexType>
+                                        <xsd:choice>
+                                            <xsd:group ref="modifySqlChildren" minOccurs="1" maxOccurs="unbounded"/>
+                                        </xsd:choice>
+                                        <xsd:attribute name="dbms" type="xsd:string"/>
+                                        <xsd:attribute name="context" type="xsd:string"/>
+                                        <xsd:attribute name="labels" type="xsd:string"/>
+                                        <xsd:attribute name="applyToRollback" type="booleanExp"/>
+                                    </xsd:complexType>
+                                </xsd:element>
+
+                            </xsd:sequence>
+                            <xsd:attributeGroup ref="changeSetAttributes"/>
+                            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+                        </xsd:complexType>
+                    </xsd:element>
+
+                    <!-- include -->
+                    <xsd:element name="include" minOccurs="0" maxOccurs="unbounded">
+                        <xsd:complexType>
+                            <xsd:attribute name="file" type="xsd:string" use="required"/>
+                            <xsd:attribute name="relativeToChangelogFile" type="booleanExp"/>
+                            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+                        </xsd:complexType>
+                    </xsd:element>
+                    <xsd:element name="includeAll" minOccurs="0" maxOccurs="unbounded">
+                        <xsd:complexType>
+                            <xsd:attribute name="path" type="xsd:string" use="required"/>
+                            <xsd:attribute name="errorIfMissingOrEmpty" type="booleanExp" default="false"/>
+                            <xsd:attribute name="relativeToChangelogFile" type="booleanExp"/>
+                            <xsd:attribute name="resourceFilter" type="xsd:string"/>
+                            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+                        </xsd:complexType>
+                    </xsd:element>
+                </xsd:choice>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="changeLogAttributes"/>
+            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:group name="modifySqlChildren">
+        <xsd:choice>
+            <xsd:element name="replace" minOccurs="0" maxOccurs="unbounded">
+                <xsd:complexType>
+                    <xsd:attribute name="replace" type="xsd:string" use="required"/>
+                    <xsd:attribute name="with" type="xsd:string" use="required"/>
+                </xsd:complexType>
+            </xsd:element>
+            <xsd:element name="regExpReplace" minOccurs="0" maxOccurs="unbounded">
+                <xsd:complexType>
+                    <xsd:attribute name="replace" type="xsd:string" use="required"/>
+                    <xsd:attribute name="with" type="xsd:string" use="required"/>
+                </xsd:complexType>
+            </xsd:element>
+            <xsd:element name="prepend" minOccurs="0" maxOccurs="unbounded">
+                <xsd:complexType>
+                    <xsd:attribute name="value" type="xsd:string" use="required"/>
+                </xsd:complexType>
+            </xsd:element>
+            <xsd:element name="append" minOccurs="0" maxOccurs="unbounded">
+                <xsd:complexType>
+                    <xsd:attribute name="value" type="xsd:string" use="required"/>
+                </xsd:complexType>
+            </xsd:element>
+        </xsd:choice>
+    </xsd:group>
+
+    <!-- Attributes for DatabaseInfo -->
+    <xsd:attributeGroup name="DatabaseInfoAttributes">
+        <xsd:attribute name="type" type="xsd:string"/>
+        <xsd:attribute name="version" type="xsd:string"/>
+        <xsd:attribute name="username" type="xsd:string"/>
+        <xsd:attribute name="password" type="xsd:string"/>
+        <xsd:attribute name="port" type="integerExp"/>
+        <xsd:attribute name="host" type="xsd:string"/>
+        <xsd:attribute name="schemaName" type="xsd:string"/>
+        <xsd:attribute name="driverName" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+    <!-- Attributes for changeSet -->
+    <xsd:attributeGroup name="changeLogAttributes">
+        <xsd:attribute name="logicalFilePath" type="xsd:string"/>
+        <xsd:attribute name="objectQuotingStrategy" type="objectQuotingStrategy" default="LEGACY"/>
+    </xsd:attributeGroup>
+
+    <!-- Attributes for changeSet -->
+    <xsd:attributeGroup name="changeSetAttributes">
+        <xsd:attribute name="id" type="xsd:string" use="required"/>
+        <xsd:attribute name="author" type="xsd:string" use="required"/>
+        <xsd:attribute name="context" type="xsd:string"/>
+        <xsd:attribute name="labels" type="xsd:string"/>
+        <xsd:attribute name="dbms" type="xsd:string"/>
+        <xsd:attribute name="runOnChange" type="booleanExp"/>
+        <xsd:attribute name="runAlways" type="booleanExp"/>
+        <xsd:attribute name="failOnError" type="booleanExp"/>
+        <xsd:attribute name="onValidationFail" type="onChangeSetValidationFail"/>
+        <xsd:attribute name="runInTransaction" type="booleanExp" default="true"/>
+        <xsd:attribute name="logicalFilePath" type="xsd:string"/>
+        <xsd:attribute name="objectQuotingStrategy" type="objectQuotingStrategy"/>
+    </xsd:attributeGroup>
+
+    <!-- Attributes for constraints -->
+    <xsd:attributeGroup name="constraintsAttributes">
+        <xsd:attribute name="nullable" type="booleanExp"/>
+        <xsd:attribute name="primaryKey" type="booleanExp"/>
+        <xsd:attribute name="primaryKeyName" type="xsd:string"/>
+        <xsd:attribute name="primaryKeyTablespace" type="xsd:string"/>
+        <xsd:attribute name="unique" type="booleanExp"/>
+        <xsd:attribute name="uniqueConstraintName" type="xsd:string"/>
+        <xsd:attribute name="references" type="xsd:string"/>
+        <xsd:attribute name="referencedTableName" type="xsd:string"/>
+        <xsd:attribute name="referencedColumnNames" type="xsd:string"/>
+        <xsd:attribute name="foreignKeyName" type="xsd:string"/>
+        <xsd:attribute name="deleteCascade" type="booleanExp"/>
+        <xsd:attribute name="deferrable" type="booleanExp"/>
+        <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
+        <xsd:attribute name="checkConstraint" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="column">
+        <xsd:attribute name="name" type="xsd:string"/>
+        <xsd:attribute name="computed" type="booleanExp"/>
+        <xsd:attribute name="type" type="xsd:string"/>
+        <xsd:attribute name="value" type="xsd:string"/>
+        <xsd:attribute name="valueNumeric" type="xsd:string"/>
+        <xsd:attribute name="valueBoolean" type="xsd:string"/>
+        <xsd:attribute name="valueDate" type="xsd:string"/>
+        <xsd:attribute name="valueComputed" type="xsd:string"/>
+        <xsd:attribute name="valueSequenceCurrent" type="xsd:string"/>
+        <xsd:attribute name="valueSequenceNext" type="xsd:string"/>
+        <xsd:attribute name="valueBlobFile" type="xsd:string"/>
+        <xsd:attribute name="valueClobFile" type="xsd:string"/>
+        <xsd:attribute name="defaultValue" type="xsd:string"/>
+        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
+        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
+        <xsd:attribute name="defaultValueBoolean" type="booleanExp"/>
+        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
+        <xsd:attribute name="defaultValueSequenceCurrent" type="xsd:string"/>
+        <xsd:attribute name="defaultValueSequenceNext" type="xsd:string"/>
+        <xsd:attribute name="autoIncrement" type="booleanExp"/>
+        <xsd:attribute name="startWith" type="xsd:long"/>
+        <xsd:attribute name="incrementBy" type="xsd:long"/>
+        <xsd:attribute name="remarks" type="xsd:string"/>
+        <xsd:attribute name="encoding" type="xsd:string">
+            <xsd:annotation>
+                <xsd:appinfo>
+                    <xsd:documentation>
+                        Used with valueClobFile to specify file encoding explicitly.
+                    </xsd:documentation>
+                </xsd:appinfo>
+            </xsd:annotation>
+        </xsd:attribute>
+        <xsd:attribute name="descending" type="booleanExp"/>
+        <xsd:anyAttribute namespace="##other" processContents="lax"/>
+    </xsd:attributeGroup>
+
+    <xsd:complexType name="columnType" mixed="true">
+        <xsd:sequence>
+            <xsd:element ref="constraints" minOccurs="0"/>
+            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded" />
+        </xsd:sequence>
+        <xsd:attributeGroup ref="column"/>
+        <xsd:anyAttribute namespace="##other" processContents="lax"/>
+    </xsd:complexType>
+
+    <xsd:attributeGroup name="param">
+        <xsd:attribute name="name" type="xsd:string"/>
+        <xsd:attribute name="value" type="xsd:string"/>
+        <xsd:attribute name="valueNumeric" type="xsd:string"/>
+        <xsd:attribute name="valueBoolean" type="xsd:string"/>
+        <xsd:attribute name="valueDate" type="xsd:string"/>
+        <xsd:attribute name="valueComputed" type="xsd:string"/>
+        <xsd:attribute name="valueSequenceNext" type="xsd:string"/>
+        <xsd:attribute name="valueSequenceCurrent" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="tableNameAttribute">
+        <xsd:attribute name="catalogName" type="xsd:string"/>
+        <xsd:attribute name="schemaName" type="xsd:string"/>
+        <xsd:attribute name="tableName" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="dropTableAttributes">
+        <xsd:attributeGroup ref="tableNameAttribute"/>
+        <xsd:attribute name="cascadeConstraints" type="booleanExp"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="renameTableAttributes">
+        <xsd:attribute name="catalogName" type="xsd:string"/>
+        <xsd:attribute name="schemaName" type="xsd:string"/>
+        <xsd:attribute name="oldTableName" type="xsd:string" use="required"/>
+        <xsd:attribute name="newTableName" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="renameViewAttributes">
+        <xsd:attribute name="catalogName" type="xsd:string"/>
+        <xsd:attribute name="schemaName" type="xsd:string"/>
+        <xsd:attribute name="oldViewName" type="xsd:string" use="required"/>
+        <xsd:attribute name="newViewName" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="renameColumnAttributes">
+        <xsd:attributeGroup ref="tableNameAttribute"/>
+        <xsd:attribute name="oldColumnName" type="xsd:string" use="required"/>
+        <xsd:attribute name="newColumnName" type="xsd:string" use="required"/>
+        <xsd:attribute name="columnDataType" type="xsd:string"/>
+        <xsd:attribute name="remarks" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="dropColumnAttributes">
+        <xsd:attributeGroup ref="tableNameAttribute"/>
+        <xsd:attribute name="columnName" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="sequenceAttributes">
+        <xsd:attribute name="catalogName" type="xsd:string"/>
+        <xsd:attribute name="schemaName" type="xsd:string"/>
+        <xsd:attribute name="sequenceName" type="xsd:string" use="required"/>
+        <xsd:attribute name="startValue" type="xsd:string"/>
+        <xsd:attribute name="incrementBy" type="xsd:string"/>
+        <xsd:attribute name="maxValue" type="xsd:string"/>
+        <xsd:attribute name="minValue" type="xsd:string"/>
+        <xsd:attribute name="ordered" type="booleanExp"/>
+        <xsd:attribute name="cacheSize" type="xsd:nonNegativeInteger"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="renameSequenceAttributes">
+        <xsd:attribute name="catalogName" type="xsd:string"/>
+        <xsd:attribute name="schemaName" type="xsd:string"/>
+        <xsd:attribute name="oldSequenceName" type="xsd:string" use="required"/>
+        <xsd:attribute name="newSequenceName" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="indexName">
+        <xsd:attribute name="indexName" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="createIndex">
+        <xsd:attributeGroup ref="tableNameAttribute"/>
+        <xsd:attributeGroup ref="indexName"/>
+        <xsd:attribute name="associatedWith" type="xsd:string" use="optional"/>
+        <xsd:attribute name="unique" type="booleanExp"/>
+        <xsd:attribute name="clustered" type="booleanExp"/>
+        <xsd:attribute name="tablespace" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+
+    <xsd:element name="addPrimaryKey">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="columnNames" type="xsd:string" use="required"/>
+            <xsd:attribute name="constraintName" type="xsd:string"/>
+            <xsd:attribute name="tablespace" type="xsd:string"/>
+            <xsd:attribute name="clustered" type="booleanExp"/>
+            <xsd:attribute name="forIndexCatalogName" type="xsd:string"/>
+            <xsd:attribute name="forIndexSchemaName" type="xsd:string"/>
+            <xsd:attribute name="forIndexName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropPrimaryKey">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="constraintName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addUniqueConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="columnNames" type="xsd:string" use="required"/>
+            <xsd:attribute name="constraintName" type="xsd:string"/>
+            <xsd:attribute name="tablespace" type="xsd:string"/>
+            <xsd:attribute name="disabled" type="booleanExp"/>
+            <xsd:attribute name="deferrable" type="booleanExp"/>
+            <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
+            <xsd:attribute name="forIndexCatalogName" type="xsd:string"/>
+            <xsd:attribute name="forIndexSchemaName" type="xsd:string"/>
+            <xsd:attribute name="forIndexName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropUniqueConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="constraintName" type="xsd:string"/>
+            <xsd:attribute name="uniqueColumns" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="modifyDataType">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="columnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="newDataType" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addLookupTable">
+        <xsd:complexType>
+            <xsd:attribute name="existingTableCatalogName" type="xsd:string"/>
+            <xsd:attribute name="existingTableSchemaName" type="xsd:string"/>
+            <xsd:attribute name="existingTableName" type="xsd:string" use="required"/>
+            <xsd:attribute name="existingColumnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="newTableCatalogName" type="xsd:string"/>
+            <xsd:attribute name="newTableSchemaName" type="xsd:string"/>
+            <xsd:attribute name="newTableName" type="xsd:string" use="required"/>
+            <xsd:attribute name="newColumnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="newColumnDataType" type="xsd:string"/>
+            <xsd:attribute name="constraintName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addAutoIncrement">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="columnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="columnDataType" type="xsd:string"/>
+            <xsd:attribute name="startWith" type="xsd:long"/>
+            <xsd:attribute name="incrementBy" type="xsd:long"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addDefaultValue">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="columnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="columnDataType" type="xsd:string"/>
+            <xsd:attribute name="defaultValue" type="xsd:string"/>
+            <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
+            <xsd:attribute name="defaultValueDate" type="xsd:string"/>
+            <xsd:attribute name="defaultValueBoolean" type="xsd:string"/>
+            <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
+            <xsd:attribute name="defaultValueSequenceNext" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropDefaultValue">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="columnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="columnDataType" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="loadData">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element name="column" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="index" type="integerExp"/>
+                        <xsd:attribute name="header" type="xsd:string"/>
+                        <xsd:attribute name="name" type="xsd:string"/>
+                        <xsd:attribute name="type" type="xsd:string"/>
+                        <xsd:attribute name="defaultValue" type="xsd:string"/>
+                        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
+                        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
+                        <xsd:attribute name="defaultValueBoolean" type="booleanExp"/>
+                        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="file" type="xsd:string"/>
+            <xsd:attribute name="relativeToChangelogFile" type="booleanExp"/>
+            <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
+            <xsd:attribute name="separator" type="xsd:string" default=","/>
+            <xsd:attribute name="quotchar" type="xsd:string" default="&quot;"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="loadUpdateData">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element name="column" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="index" type="integerExp"/>
+                        <xsd:attribute name="header" type="xsd:string"/>
+                        <xsd:attribute name="name" type="xsd:string"/>
+                        <xsd:attribute name="type" type="xsd:string"/>
+                        <xsd:attribute name="defaultValue" type="xsd:string"/>
+                        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
+                        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
+                        <xsd:attribute name="defaultValueBoolean" type="booleanExp"/>
+                        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="file" type="xsd:string"/>
+            <xsd:attribute name="relativeToChangelogFile" type="booleanExp"/>
+            <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
+            <xsd:attribute name="primaryKey" type="xsd:string" use="required"/>
+            <xsd:attribute name="onlyUpdate" type="xsd:boolean" default="false"/>
+            <xsd:attribute name="separator" type="xsd:string" default=","/>
+            <xsd:attribute name="quotchar" type="xsd:string" default="&quot;"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:simpleType name="fkCascadeActionOptions">
+        <xsd:restriction base="xsd:token">
+            <xsd:enumeration value="CASCADE"></xsd:enumeration>
+            <xsd:enumeration value="SET NULL"></xsd:enumeration>
+            <xsd:enumeration value="SET DEFAULT"></xsd:enumeration>
+            <xsd:enumeration value="RESTRICT"></xsd:enumeration>
+            <xsd:enumeration value="NO ACTION"></xsd:enumeration>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:attributeGroup name="addForeignKeyConstraintAttrib">
+        <xsd:attribute name="baseTableCatalogName" type="xsd:string"/>
+        <xsd:attribute name="baseTableSchemaName" type="xsd:string"/>
+        <xsd:attribute name="baseTableName" type="xsd:string" use="required"/>
+        <xsd:attribute name="baseColumnNames" type="xsd:string" use="required"/>
+        <xsd:attribute name="constraintName" type="xsd:string" use="required"/>
+        <xsd:attribute name="referencedTableCatalogName" type="xsd:string"/>
+        <xsd:attribute name="referencedTableSchemaName" type="xsd:string"/>
+        <xsd:attribute name="referencedTableName" type="xsd:string" use="required"/>
+        <xsd:attribute name="referencedColumnNames" type="xsd:string" use="required"/>
+        <xsd:attribute name="deferrable" type="booleanExp"/>
+        <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
+        <xsd:attribute name="deleteCascade" type="booleanExp"/>
+        <xsd:attribute name="onDelete" type="fkCascadeActionOptions"/>
+        <xsd:attribute name="onUpdate" type="fkCascadeActionOptions"/>
+        <xsd:attribute name="referencesUniqueColumn" type="booleanExp"/>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="addNotNullConstraintAttrib">
+        <xsd:attributeGroup ref="tableNameAttribute"/>
+        <xsd:attribute name="columnName" type="xsd:string" use="required"/>
+        <xsd:attribute name="defaultNullValue" type="xsd:string"/>
+        <xsd:attribute name="columnDataType" type="xsd:string"/>
+        <xsd:attribute name="constraintName" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+
+    <xsd:element name="addNotNullConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="addNotNullConstraintAttrib"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addForeignKeyConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="addForeignKeyConstraintAttrib"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="dbmsAttrib">
+        <xsd:attribute name="type" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:element name="dbms">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="dbmsAttrib"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="changeSetExecuted">
+        <xsd:complexType>
+            <xsd:attribute name="id" type="xsd:string" use="required"/>
+            <xsd:attribute name="author" type="xsd:string" use="required"/>
+            <xsd:attribute name="changeLogFile" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="tableExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="columnExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string" use="required"/>
+            <xsd:attribute name="columnName" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="sequenceExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="sequenceName" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="foreignKeyConstraintExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="foreignKeyTableName" type="xsd:string"/>
+            <xsd:attribute name="foreignKeyName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="indexExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="indexName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string"/>
+            <xsd:attribute name="columnNames" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="rowCount">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string"/>
+            <xsd:attribute name="expectedRows" type="xsd:int"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="tableIsEmpty">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="changeLogPropertyDefined">
+        <xsd:complexType>
+            <xsd:attribute name="property" type="xsd:string" use="required"/>
+            <xsd:attribute name="value" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="primaryKeyExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="primaryKeyName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="viewExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="viewName" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="sqlCheck">
+        <xsd:complexType mixed="true">
+            <xsd:attribute name="expectedResult" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="customPrecondition">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="param" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="name" type="xsd:string" use="required"/>
+                        <xsd:attribute name="value" type="xsd:string" use="required"/>
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attribute name="className" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="and">
+        <xsd:complexType>
+            <xsd:choice>
+                <xsd:group ref="PreConditionChildren" minOccurs="1" maxOccurs="unbounded"/>
+            </xsd:choice>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="or">
+        <xsd:complexType>
+            <xsd:choice>
+                <xsd:group ref="PreConditionChildren" minOccurs="1" maxOccurs="unbounded"/>
+            </xsd:choice>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="not">
+        <xsd:complexType>
+            <xsd:choice>
+                <xsd:group ref="PreConditionChildren" minOccurs="1" maxOccurs="unbounded"/>
+            </xsd:choice>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="runningAsAttrib">
+        <xsd:attribute name="username" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:element name="runningAs">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="runningAsAttrib"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="objectQuotingStrategyAttrib">
+        <xsd:attribute name="strategy" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:element name="expectedQuotingStrategy">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="objectQuotingStrategyAttrib"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="dropForeignKeyConstraintAttrib">
+        <xsd:attribute name="baseTableCatalogName" type="xsd:string"/>
+        <xsd:attribute name="baseTableSchemaName" type="xsd:string"/>
+        <xsd:attribute name="baseTableName" type="xsd:string" use="required"/>
+        <xsd:attribute name="constraintName" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+    <xsd:element name="dropForeignKeyConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="dropForeignKeyConstraintAttrib"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="dropAllForeignKeyConstraintsAttrib">
+        <xsd:attribute name="baseTableCatalogName" type="xsd:string"/>
+        <xsd:attribute name="baseTableSchemaName" type="xsd:string"/>
+        <xsd:attribute name="baseTableName" type="xsd:string" use="required"/>
+    </xsd:attributeGroup>
+
+    <xsd:element name="dropAllForeignKeyConstraints">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="dropAllForeignKeyConstraintsAttrib"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropNotNullConstraint">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string" use="required"/>
+            <xsd:attribute name="columnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="columnDataType" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="setTableRemarks">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string" use="required"/>
+            <xsd:attribute name="remarks" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="setColumnRemarks">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string" use="required"/>
+            <xsd:attribute name="columnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="remarks" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="constraints">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="constraintsAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+
+    <xsd:element name="column">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="constraints" minOccurs="0"/>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="column"/>
+            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="param">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="param"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- Children for createTable -->
+    <xsd:element name="createTable">
+        <xsd:complexType>
+            <xsd:choice maxOccurs="unbounded">
+                <xsd:element ref="column" minOccurs="1" maxOccurs="unbounded"/>
+                <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+            </xsd:choice>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="tablespace" type="xsd:string"/>
+            <xsd:attribute name="remarks" type="xsd:string"/>
+            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- Children for createView -->
+    <xsd:element name="createView">
+        <xsd:complexType>
+            <xsd:simpleContent>
+                <xsd:extension base="xsd:string">
+                    <xsd:attribute name="catalogName" type="xsd:string"/>
+                    <xsd:attribute name="schemaName" type="xsd:string"/>
+                    <xsd:attribute name="viewName" type="xsd:string" use="required"/>
+                    <xsd:attribute name="replaceIfExists" type="booleanExp"/>
+                    <xsd:attribute name="fullDefinition" type="booleanExp"/>
+                </xsd:extension>
+            </xsd:simpleContent>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- Children for insert -->
+    <xsd:element name="insert">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element ref="column" maxOccurs="unbounded"/>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="dbms" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="update">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="column" minOccurs="1" maxOccurs="unbounded"/>
+                <xsd:element name="where" minOccurs="0" maxOccurs="1"/>
+                <xsd:element ref="whereParams" minOccurs="0" maxOccurs="1"/>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="whereParams">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="param" minOccurs="1" maxOccurs="unbounded"/>
+            </xsd:sequence>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="delete">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element name="where" minOccurs="0" maxOccurs="1"/>
+                <xsd:element ref="whereParams" minOccurs="0" maxOccurs="1"/>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- Children for addColum -->
+    <xsd:element name="addColumn">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="column" minOccurs="1" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:complexContent mixed="true">
+                            <xsd:extension base="columnType">
+                                <xsd:attribute name="beforeColumn" type="xsd:string"/>
+                                <xsd:attribute name="afterColumn" type="xsd:string"/>
+                                <xsd:attribute name="position" type="xsd:integer"/>
+                            </xsd:extension>
+                        </xsd:complexContent>
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="rollback">
+        <xsd:complexType mixed="true">
+            <xsd:choice>
+                <xsd:group ref="changeSetChildren" minOccurs="0" maxOccurs="unbounded"/>
+            </xsd:choice>
+            <xsd:attribute name="changeSetPath" type="xsd:string"/>
+            <xsd:attribute name="changeSetAuthor" type="xsd:string"/>
+            <xsd:attribute name="changeSetId" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- comment -->
+    <xsd:element name="comment" type="xsd:string"/>
+
+    <!-- sql -->
+    <xsd:element name="sql">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="comment" minOccurs="0" maxOccurs="1"/>
+            </xsd:sequence>
+            <xsd:attribute name="stripComments" type="booleanExp"/>
+            <xsd:attribute name="splitStatements" type="booleanExp"/>
+            <xsd:attribute name="endDelimiter" type="xsd:string"/>
+            <xsd:attribute name="dbms" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="createProcedure">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="comment" minOccurs="0" maxOccurs="1"/>
+            </xsd:sequence>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+            <xsd:attribute name="procedureName" type="xsd:string"/>
+            <xsd:attribute name="path" type="xsd:string"/>
+            <xsd:attribute name="encoding" type="xsd:string"/>
+            <xsd:attribute name="relativeToChangelogFile" type="booleanExp"/>
+            <xsd:attribute name="dbms" type="xsd:string"/>
+            <xsd:attribute name="replaceIfExists" type="xsd:boolean"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="executeCommand">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="arg" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="value" type="xsd:string" use="required"/>
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attribute name="executable" type="xsd:string" use="required"/>
+            <xsd:attribute name="os" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="sqlFile">
+        <xsd:complexType>
+            <xsd:attribute name="path" type="xsd:string" use="required"/>
+            <xsd:attribute name="stripComments" type="booleanExp"/>
+            <xsd:attribute name="splitStatements" type="booleanExp"/>
+            <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
+            <xsd:attribute name="endDelimiter" type="xsd:string"/>
+            <xsd:attribute name="relativeToChangelogFile" type="booleanExp"/>
+            <xsd:attribute name="dbms" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="tagDatabase">
+        <xsd:complexType>
+            <xsd:attribute name="tag" type="xsd:string" use="required"/>
+            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="stop">
+        <xsd:complexType mixed="true"/>
+    </xsd:element>
+
+    <xsd:element name="empty"/>
+
+    <xsd:element name="output">
+        <xsd:complexType mixed="true">
+            <xsd:attribute name="target" type="xsd:string"/>
+        </xsd:complexType>
+
+    </xsd:element>
+
+    <!-- renameTable -->
+    <xsd:element name="renameTable">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="renameTableAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="renameView">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="renameViewAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- dropTable -->
+    <xsd:element name="dropTable">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="dropTableAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropView">
+        <xsd:complexType>
+            <xsd:attribute name="viewName" type="xsd:string" use="required"/>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropProcedure">
+        <xsd:complexType>
+            <xsd:attribute name="procedureName" type="xsd:string" use="required"/>
+            <xsd:attribute name="catalogName" type="xsd:string"/>
+            <xsd:attribute name="schemaName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- renameColumn -->
+    <xsd:element name="renameColumn">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="renameColumnAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropColumn">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="column" minOccurs="0" maxOccurs="unbounded" type="columnType"/>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="dropColumnAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="mergeColumns">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attribute name="column1Name" type="xsd:string" use="required"/>
+            <xsd:attribute name="joinString" type="xsd:string" use="required"/>
+            <xsd:attribute name="column2Name" type="xsd:string" use="required"/>
+            <xsd:attribute name="finalColumnName" type="xsd:string" use="required"/>
+            <xsd:attribute name="finalColumnType" type="xsd:string" use="required"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="createSequence">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="sequenceAttributes"/>
+            <xsd:attribute name="cycle" type="booleanExp">
+                <xsd:annotation>
+                    <xsd:documentation>
+                        true for a cycling sequence, false for a non-cycling sequence.
+                        Default is false.
+                    </xsd:documentation>
+                </xsd:annotation>
+            </xsd:attribute>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="alterSequence">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="sequenceAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropSequence">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="sequenceAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="renameSequence">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="renameSequenceAttributes"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="createIndex">
+        <xsd:complexType>
+            <xsd:choice maxOccurs="unbounded">
+                <xsd:element ref="column" maxOccurs="unbounded"/>
+                <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+            </xsd:choice>
+            <xsd:attributeGroup ref="createIndex"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropIndex">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute"/>
+            <xsd:attributeGroup ref="indexName"/>
+            <xsd:attribute name="associatedWith" type="xsd:string" use="optional"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="customChange">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="param" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType mixed="true">
+                        <xsd:attribute name="name" type="xsd:string" use="required"/>
+                        <xsd:attribute name="value" type="xsd:string"/>
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attribute name="class" type="xsd:string" use="required"/>
+            <xsd:anyAttribute processContents="lax"/>
+        </xsd:complexType>
+    </xsd:element>
+
+
+    <!-- Children for changeSet -->
+    <xsd:group name="changeSetChildren">
+        <xsd:choice>
+            <xsd:element ref="comment" maxOccurs="1"/>
+            <xsd:element ref="createTable" maxOccurs="unbounded"/>
+            <xsd:element ref="dropTable" maxOccurs="unbounded"/>
+            <xsd:element ref="createView" maxOccurs="unbounded"/>
+            <xsd:element ref="renameView" maxOccurs="unbounded"/>
+            <xsd:element ref="dropView" maxOccurs="unbounded"/>
+            <xsd:element ref="insert" maxOccurs="unbounded"/>
+            <xsd:element ref="addColumn" maxOccurs="unbounded"/>
+            <xsd:element ref="sql" maxOccurs="unbounded"/>
+            <xsd:element ref="createProcedure" maxOccurs="unbounded"/>
+            <xsd:element ref="dropProcedure" maxOccurs="unbounded"/>
+            <xsd:element ref="sqlFile" maxOccurs="unbounded"/>
+            <xsd:element ref="renameTable" maxOccurs="unbounded"/>
+            <xsd:element ref="renameColumn" maxOccurs="unbounded"/>
+            <xsd:element ref="dropColumn" maxOccurs="unbounded"/>
+            <xsd:element ref="mergeColumns" maxOccurs="unbounded"/>
+            <xsd:element ref="modifyDataType" maxOccurs="unbounded"/>
+            <xsd:element ref="createSequence" maxOccurs="unbounded"/>
+            <xsd:element ref="alterSequence" maxOccurs="unbounded"/>
+            <xsd:element ref="dropSequence" maxOccurs="unbounded"/>
+            <xsd:element ref="renameSequence" maxOccurs="unbounded"/>
+            <xsd:element ref="createIndex" maxOccurs="unbounded"/>
+            <xsd:element ref="dropIndex" maxOccurs="unbounded"/>
+            <xsd:element ref="addNotNullConstraint" maxOccurs="unbounded"/>
+            <xsd:element ref="dropNotNullConstraint" maxOccurs="unbounded"/>
+            <xsd:element ref="addForeignKeyConstraint" maxOccurs="unbounded"/>
+            <xsd:element ref="dropForeignKeyConstraint" maxOccurs="unbounded"/>
+            <xsd:element ref="dropAllForeignKeyConstraints"
+                         maxOccurs="unbounded"/>
+            <xsd:element ref="addPrimaryKey" maxOccurs="unbounded"/>
+            <xsd:element ref="dropPrimaryKey" maxOccurs="unbounded"/>
+            <xsd:element ref="addLookupTable" maxOccurs="unbounded"/>
+            <xsd:element ref="addAutoIncrement" maxOccurs="unbounded"/>
+            <xsd:element ref="addDefaultValue" maxOccurs="unbounded"/>
+            <xsd:element ref="dropDefaultValue" maxOccurs="unbounded"/>
+            <xsd:element ref="addUniqueConstraint" maxOccurs="unbounded"/>
+            <xsd:element ref="dropUniqueConstraint" maxOccurs="unbounded"/>
+            <xsd:element ref="setTableRemarks" maxOccurs="unbounded"/>
+            <xsd:element ref="setColumnRemarks" maxOccurs="unbounded"/>
+            <xsd:element ref="customChange" maxOccurs="unbounded"/>
+            <xsd:element ref="update" maxOccurs="unbounded"/>
+            <xsd:element ref="delete" maxOccurs="unbounded"/>
+            <xsd:element ref="loadData" maxOccurs="unbounded"/>
+            <xsd:element ref="loadUpdateData" maxOccurs="unbounded"/>
+            <xsd:element ref="executeCommand" maxOccurs="unbounded"/>
+            <xsd:element ref="stop" maxOccurs="unbounded"/>
+            <xsd:element ref="output" maxOccurs="unbounded"/>
+            <xsd:element ref="empty" maxOccurs="unbounded"/>
+            <xsd:element ref="rollback" maxOccurs="1"/>
+            <xsd:any namespace="##other" processContents="lax" minOccurs="0"
+                     maxOccurs="unbounded"/>
+        </xsd:choice>
+    </xsd:group>
+
+    <!-- Children for Precondition -->
+    <xsd:group name="PreConditionChildren">
+        <xsd:sequence>
+            <xsd:choice>
+                <xsd:element ref="and" maxOccurs="unbounded"/>
+                <xsd:element ref="or" maxOccurs="unbounded"/>
+                <xsd:element ref="not" maxOccurs="unbounded"/>
+                <xsd:element ref="dbms" maxOccurs="unbounded"/>
+                <xsd:element ref="runningAs" maxOccurs="unbounded"/>
+                <xsd:element ref="changeSetExecuted" maxOccurs="unbounded"/>
+                <xsd:element ref="tableExists" maxOccurs="unbounded"/>
+                <xsd:element ref="columnExists" maxOccurs="unbounded"/>
+                <xsd:element ref="sequenceExists" maxOccurs="unbounded"/>
+                <xsd:element ref="foreignKeyConstraintExists" maxOccurs="unbounded"/>
+                <xsd:element ref="indexExists" maxOccurs="unbounded"/>
+                <xsd:element ref="primaryKeyExists" maxOccurs="unbounded"/>
+                <xsd:element ref="viewExists" maxOccurs="unbounded"/>
+                <xsd:element ref="tableIsEmpty" maxOccurs="unbounded"/>
+                <xsd:element ref="rowCount" maxOccurs="unbounded"/>
+                <xsd:element ref="sqlCheck" maxOccurs="unbounded"/>
+                <xsd:element ref="changeLogPropertyDefined" maxOccurs="unbounded"/>
+                <xsd:element ref="expectedQuotingStrategy" maxOccurs="unbounded"/>
+                <xsd:element ref="customPrecondition" maxOccurs="unbounded"/>
+                <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+            </xsd:choice>
+        </xsd:sequence>
+    </xsd:group>
+
+</xsd:schema>
diff --git a/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd b/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
new file mode 100644
index 0000000..bcd785f
--- /dev/null
+++ b/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
@@ -0,0 +1,1285 @@
+ï»¿<?xml version="1.0" encoding="UTF-8"?>
+
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+            targetNamespace="http://www.liquibase.org/xml/ns/dbchangelog" xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+            elementFormDefault="qualified">
+
+    <xsd:simpleType name="propertyExpression" id="propertyExpression">
+        <xsd:restriction base="xsd:string">
+            <xsd:pattern value="$\{[\w\.]+\}"/>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="booleanExp" id="booleanExp">
+        <xsd:annotation>
+            <xsd:appinfo>
+                <xsd:documentation>Extension to standard XSD boolean type to allow ${} parameters</xsd:documentation>
+            </xsd:appinfo>
+        </xsd:annotation>
+        <xsd:union>
+            <xsd:simpleType>
+                <xsd:restriction base="xsd:boolean"/>
+            </xsd:simpleType>
+            <xsd:simpleType>
+                <xsd:restriction base="propertyExpression"/>
+            </xsd:simpleType>
+        </xsd:union>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="integerExp" id="integerExp">
+        <xsd:annotation>
+            <xsd:appinfo>
+                <xsd:documentation>Extension to standard XSD integer type to allow ${} parameters</xsd:documentation>
+            </xsd:appinfo>
+        </xsd:annotation>
+        <xsd:union>
+            <xsd:simpleType>
+                <xsd:restriction base="xsd:integer"/>
+            </xsd:simpleType>
+            <xsd:simpleType>
+                <xsd:restriction base="propertyExpression"/>
+            </xsd:simpleType>
+        </xsd:union>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="onChangeSetPreconditionErrorOrFail">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="HALT" />
+            <xsd:enumeration value="WARN" />
+            <xsd:enumeration value="CONTINUE" />
+            <xsd:enumeration value="MARK_RAN" />
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="onChangeLogPreconditionErrorOrFail">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="HALT" />
+            <xsd:enumeration value="WARN" />
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="onChangeLogPreconditionOnSqlOutput">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="TEST" />
+            <xsd:enumeration value="FAIL" />
+            <xsd:enumeration value="IGNORE" />
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="onChangeSetValidationFail">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="HALT" />
+            <xsd:enumeration value="MARK_RAN" />
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:simpleType name="objectQuotingStrategy">
+        <xsd:restriction base="xsd:string">
+            <xsd:enumeration value="LEGACY" />
+            <xsd:enumeration value="QUOTE_ALL_OBJECTS" />
+            <xsd:enumeration value="QUOTE_ONLY_RESERVED_WORDS" />
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <!-- This is the main (root) part of the xsd -->
+    <xsd:element name="databaseChangeLog">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="property" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="file" type="xsd:string" />
+                        <xsd:attribute name="name" type="xsd:string" />
+                        <xsd:attribute name="value" type="xsd:string" />
+                        <xsd:attribute name="dbms" type="xsd:string" />
+                        <xsd:attribute name="context" type="xsd:string" />
+                        <xsd:attribute name="labels" type="xsd:string" />
+                        <xsd:attribute name="global" type="xsd:boolean"/>
+                    </xsd:complexType>
+                </xsd:element>
+
+                <xsd:element name="preConditions" minOccurs="0"
+                             maxOccurs="1">
+                    <xsd:complexType>
+                        <xsd:choice>
+                            <xsd:group ref="PreConditionChildren" maxOccurs="unbounded" />
+                        </xsd:choice>
+                        <xsd:attribute name="onFailMessage" type="xsd:string" />
+                        <xsd:attribute name="onErrorMessage" type="xsd:string" />
+                        <xsd:attribute name="onFail"
+                                       type="onChangeLogPreconditionErrorOrFail" />
+                        <xsd:attribute name="onError"
+                                       type="onChangeLogPreconditionErrorOrFail" />
+                        <xsd:attribute name="onSqlOutput"
+                                       type="onChangeLogPreconditionOnSqlOutput" />
+                    </xsd:complexType>
+                </xsd:element>
+
+                <xsd:choice minOccurs="0" maxOccurs="unbounded">
+                    <xsd:element name="changeSet" minOccurs="0" maxOccurs="unbounded">
+                        <xsd:complexType>
+                            <xsd:sequence>
+                                <xsd:element name="validCheckSum" minOccurs="0"
+                                             maxOccurs="unbounded">
+                                    <xsd:complexType mixed="true">
+                                        <xsd:sequence>
+                                            <xsd:element ref="comment" minOccurs="0"
+                                                         maxOccurs="1" />
+                                        </xsd:sequence>
+                                    </xsd:complexType>
+                                </xsd:element>
+                                <xsd:element name="preConditions" minOccurs="0"
+                                             maxOccurs="1">
+                                    <xsd:annotation>
+                                        <xsd:appinfo>
+                                            <xsd:documentation>onChangeLogPreconditionOnSqlOutput determines what should happen when evaluating this precondition in updateSQL mode.  TEST: Run precondition, FAIL: Fail precondition, IGNORE: Skip precondition check [DEFAULT]</xsd:documentation>
+                                        </xsd:appinfo>
+                                    </xsd:annotation>
+                                    <xsd:complexType>
+                                        <xsd:choice>
+                                            <xsd:group ref="PreConditionChildren" maxOccurs="unbounded" />
+                                        </xsd:choice>
+                                        <xsd:attribute name="onFailMessage" type="xsd:string" />
+                                        <xsd:attribute name="onErrorMessage" type="xsd:string" />
+                                        <xsd:attribute name="onFail"
+                                                       type="onChangeSetPreconditionErrorOrFail" />
+                                        <xsd:attribute name="onError"
+                                                       type="onChangeSetPreconditionErrorOrFail" />
+                                        <xsd:attribute name="onSqlOutput"
+                                                       type="onChangeLogPreconditionOnSqlOutput" />
+                                    </xsd:complexType>
+                                </xsd:element>
+                                <xsd:choice>
+                                    <xsd:element ref="tagDatabase" maxOccurs="1" />
+                                    <xsd:group ref="changeSetChildren" minOccurs="0"
+                                               maxOccurs="unbounded" />
+                                </xsd:choice>
+
+                                <xsd:element name="modifySql" minOccurs="0"
+                                             maxOccurs="unbounded">
+                                    <xsd:complexType>
+                                        <xsd:choice>
+                                            <xsd:group ref="modifySqlChildren" minOccurs="1"
+                                                       maxOccurs="unbounded" />
+                                        </xsd:choice>
+                                        <xsd:attribute name="dbms" type="xsd:string" />
+                                        <xsd:attribute name="context" type="xsd:string" />
+                                        <xsd:attribute name="labels" type="xsd:string" />
+                                        <xsd:attribute name="applyToRollback" type="booleanExp" />
+                                    </xsd:complexType>
+                                </xsd:element>
+
+                            </xsd:sequence>
+                            <xsd:attributeGroup ref="changeSetAttributes" />
+                            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+                        </xsd:complexType>
+                    </xsd:element>
+
+                    <!-- include -->
+                    <xsd:element name="include" minOccurs="0" maxOccurs="unbounded">
+                        <xsd:complexType>
+                            <xsd:attribute name="file" type="xsd:string" use="required" />
+                            <xsd:attribute name="relativeToChangelogFile" type="booleanExp" />
+                            <xsd:attribute name="context" type="xsd:string" />
+                            <xsd:anyAttribute namespace="##other"  processContents="lax"/>
+                        </xsd:complexType>
+                    </xsd:element>
+                    <xsd:element name="includeAll" minOccurs="0" maxOccurs="unbounded">
+                        <xsd:complexType>
+                            <xsd:attribute name="path" type="xsd:string" use="required" />
+                            <xsd:attribute name="errorIfMissingOrEmpty" type="booleanExp" default="false"/>
+                            <xsd:attribute name="relativeToChangelogFile" type="booleanExp" />
+                            <xsd:attribute name="resourceComparator" type="xsd:string"/>
+                            <xsd:attribute name="filter" type="xsd:string" />
+                            <xsd:attribute name="context" type="xsd:string" />
+                            <xsd:anyAttribute namespace="##other"  processContents="lax"/>
+                        </xsd:complexType>
+                    </xsd:element>
+                </xsd:choice>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="changeLogAttributes" />
+            <xsd:anyAttribute namespace="##other"  processContents="lax"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:group name="modifySqlChildren">
+        <xsd:choice>
+            <xsd:element name="replace" minOccurs="0" maxOccurs="unbounded">
+                <xsd:complexType>
+                    <xsd:attribute name="replace" type="xsd:string" use="required" />
+                    <xsd:attribute name="with" type="xsd:string" use="required" />
+                </xsd:complexType>
+            </xsd:element>
+            <xsd:element name="regExpReplace" minOccurs="0"
+                         maxOccurs="unbounded">
+                <xsd:complexType>
+                    <xsd:attribute name="replace" type="xsd:string" use="required" />
+                    <xsd:attribute name="with" type="xsd:string" use="required" />
+                </xsd:complexType>
+            </xsd:element>
+            <xsd:element name="prepend" minOccurs="0" maxOccurs="unbounded">
+                <xsd:complexType>
+                    <xsd:attribute name="value" type="xsd:string" use="required" />
+                </xsd:complexType>
+            </xsd:element>
+            <xsd:element name="append" minOccurs="0" maxOccurs="unbounded">
+                <xsd:complexType>
+                    <xsd:attribute name="value" type="xsd:string" use="required" />
+                </xsd:complexType>
+            </xsd:element>
+        </xsd:choice>
+    </xsd:group>
+
+    <!-- Attributes for DatabaseInfo -->
+    <xsd:attributeGroup name="DatabaseInfoAttributes">
+        <xsd:attribute name="type" type="xsd:string" />
+        <xsd:attribute name="version" type="xsd:string" />
+        <xsd:attribute name="username" type="xsd:string" />
+        <xsd:attribute name="password" type="xsd:string" />
+        <xsd:attribute name="port" type="integerExp" />
+        <xsd:attribute name="host" type="xsd:string" />
+        <xsd:attribute name="schemaName" type="xsd:string" />
+        <xsd:attribute name="driverName" type="xsd:string" />
+    </xsd:attributeGroup>
+
+    <!-- Attributes for changeSet -->
+    <xsd:attributeGroup name="changeLogAttributes">
+        <xsd:attribute name="logicalFilePath" type="xsd:string" />
+        <xsd:attribute name="context" type="xsd:string" />
+        <xsd:attribute name="objectQuotingStrategy" type="objectQuotingStrategy" default="LEGACY" />
+    </xsd:attributeGroup>
+
+    <!-- Attributes for changeSet -->
+    <xsd:attributeGroup name="changeSetAttributes">
+        <xsd:attribute name="id" type="xsd:string" use="required" />
+        <xsd:attribute name="author" type="xsd:string" use="required" />
+        <xsd:attribute name="context" type="xsd:string" />
+        <xsd:attribute name="labels" type="xsd:string" />
+        <xsd:attribute name="dbms" type="xsd:string" />
+        <xsd:attribute name="runOnChange" type="booleanExp" />
+        <xsd:attribute name="runAlways" type="booleanExp" />
+        <xsd:attribute name="failOnError" type="booleanExp" />
+        <xsd:attribute name="onValidationFail" type="onChangeSetValidationFail" />
+        <xsd:attribute name="runInTransaction" type="booleanExp" default="true" />
+        <xsd:attribute name="logicalFilePath" type="xsd:string" />
+        <xsd:attribute name="objectQuotingStrategy" type="objectQuotingStrategy" />
+        <xsd:attribute name="created" type="xsd:string"/>
+        <xsd:attribute name="runOrder" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+    <!-- Attributes for constraints -->
+    <xsd:attributeGroup name="constraintsAttributes">
+        <xsd:attribute name="nullable" type="booleanExp" />
+        <xsd:attribute name="primaryKey" type="booleanExp" />
+        <xsd:attribute name="primaryKeyName" type="xsd:string" />
+        <xsd:attribute name="primaryKeyTablespace" type="xsd:string" />
+        <xsd:attribute name="unique" type="booleanExp" />
+        <xsd:attribute name="uniqueConstraintName" type="xsd:string" />
+        <xsd:attribute name="references" type="xsd:string" />
+        <xsd:attribute name="referencedTableCatalogName" type="xsd:string" />
+        <xsd:attribute name="referencedTableSchemaName" type="xsd:string" />
+        <xsd:attribute name="referencedTableName" type="xsd:string"/>
+        <xsd:attribute name="referencedColumnNames" type="xsd:string"/>
+        <xsd:attribute name="foreignKeyName" type="xsd:string" />
+        <xsd:attribute name="deleteCascade" type="booleanExp" />
+        <xsd:attribute name="deferrable" type="booleanExp" />
+        <xsd:attribute name="initiallyDeferred" type="booleanExp" />
+        <xsd:attribute name="checkConstraint" type="xsd:string" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="column">
+        <xsd:attribute name="name" type="xsd:string"/>
+        <xsd:attribute name="computed" type="booleanExp"/>
+        <xsd:attribute name="type" type="xsd:string" />
+        <xsd:attribute name="value" type="xsd:string" />
+        <xsd:attribute name="valueNumeric" type="xsd:string" />
+        <xsd:attribute name="valueBoolean" type="xsd:string" />
+        <xsd:attribute name="valueDate" type="xsd:string" />
+        <xsd:attribute name="valueComputed" type="xsd:string" />
+        <xsd:attribute name="valueSequenceCurrent" type="xsd:string" />
+        <xsd:attribute name="valueSequenceNext" type="xsd:string" />
+        <xsd:attribute name="valueBlobFile" type="xsd:string"/>
+        <xsd:attribute name="valueClobFile" type="xsd:string"/>
+        <xsd:attribute name="defaultValue" type="xsd:string" />
+        <xsd:attribute name="defaultValueNumeric" type="xsd:string" />
+        <xsd:attribute name="defaultValueDate" type="xsd:string" />
+        <xsd:attribute name="defaultValueBoolean" type="booleanExp" />
+        <xsd:attribute name="defaultValueComputed" type="xsd:string" />
+        <xsd:attribute name="defaultValueSequenceCurrent" type="xsd:string" />
+        <xsd:attribute name="defaultValueSequenceNext" type="xsd:string" />
+        <xsd:attribute name="autoIncrement" type="booleanExp" />
+        <xsd:attribute name="startWith" type="xsd:long" />
+        <xsd:attribute name="incrementBy" type="xsd:long" />
+        <xsd:attribute name="remarks" type="xsd:string" />
+        <xsd:attribute name="encoding" type="xsd:string">
+            <xsd:annotation>
+                <xsd:appinfo>
+                    <xsd:documentation>
+                        Used with valueClobFile to specify file encoding explicitly.
+                    </xsd:documentation>
+                </xsd:appinfo>
+            </xsd:annotation>
+        </xsd:attribute>
+        <xsd:anyAttribute namespace="##other" processContents="lax"/>
+    </xsd:attributeGroup>
+
+    <xsd:complexType name="columnType" mixed="true">
+        <xsd:sequence>
+            <xsd:element ref="constraints" minOccurs="0"/>
+            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded" />
+        </xsd:sequence>
+        <xsd:attributeGroup ref="column"/>
+        <xsd:anyAttribute namespace="##other" processContents="lax" />
+    </xsd:complexType>
+
+    <xsd:attributeGroup name="param">
+        <xsd:attribute name="name" type="xsd:string" />
+        <xsd:attribute name="value" type="xsd:string" />
+        <xsd:attribute name="valueNumeric" type="xsd:string" />
+        <xsd:attribute name="valueBoolean" type="xsd:string" />
+        <xsd:attribute name="valueDate" type="xsd:string" />
+        <xsd:attribute name="valueComputed" type="xsd:string" />
+        <xsd:attribute name="valueSequenceNext" type="xsd:string" />
+        <xsd:attribute name="valueSequenceCurrent" type="xsd:string" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="tableNameAttribute">
+        <xsd:attribute name="catalogName" type="xsd:string" />
+        <xsd:attribute name="schemaName" type="xsd:string" />
+        <xsd:attribute name="tableName" type="xsd:string" use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="dropTableAttributes">
+        <xsd:attributeGroup ref="tableNameAttribute" />
+        <xsd:attribute name="cascadeConstraints" type="booleanExp" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="renameTableAttributes">
+        <xsd:attribute name="catalogName" type="xsd:string" />
+        <xsd:attribute name="schemaName" type="xsd:string" />
+        <xsd:attribute name="oldTableName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="newTableName" type="xsd:string"
+                       use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="renameViewAttributes">
+        <xsd:attribute name="catalogName" type="xsd:string" />
+        <xsd:attribute name="schemaName" type="xsd:string" />
+        <xsd:attribute name="oldViewName" type="xsd:string" use="required" />
+        <xsd:attribute name="newViewName" type="xsd:string" use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="renameColumnAttributes">
+        <xsd:attributeGroup ref="tableNameAttribute" />
+        <xsd:attribute name="oldColumnName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="newColumnName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="columnDataType" type="xsd:string" />
+        <xsd:attribute name="remarks" type="xsd:string" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="dropColumnAttributes">
+        <xsd:attributeGroup ref="tableNameAttribute" />
+        <xsd:attribute name="columnName" type="xsd:string" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="sequenceAttributes">
+        <xsd:attribute name="catalogName" type="xsd:string" />
+        <xsd:attribute name="schemaName" type="xsd:string" />
+        <xsd:attribute name="sequenceName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="startValue" type="xsd:string" />
+        <xsd:attribute name="incrementBy" type="xsd:string" />
+        <xsd:attribute name="maxValue" type="xsd:string" />
+        <xsd:attribute name="minValue" type="xsd:string" />
+        <xsd:attribute name="ordered" type="booleanExp" />
+        <xsd:attribute name="cacheSize" type="xsd:nonNegativeInteger" />
+        <xsd:attribute name="cycle" type="booleanExp">
+            <xsd:annotation>
+                <xsd:documentation>
+                    true for a cycling sequence, false for a non-cycling sequence.
+                    Default is false.
+                </xsd:documentation>
+            </xsd:annotation>
+        </xsd:attribute>
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="renameSequenceAttributes">
+        <xsd:attribute name="catalogName" type="xsd:string" />
+        <xsd:attribute name="schemaName" type="xsd:string" />
+        <xsd:attribute name="oldSequenceName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="newSequenceName" type="xsd:string"
+                       use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="indexName">
+        <xsd:attribute name="indexName" type="xsd:string" use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="createIndex">
+        <xsd:attributeGroup ref="tableNameAttribute" />
+        <xsd:attributeGroup ref="indexName" />
+        <xsd:attribute name="associatedWith" type="xsd:string" use="optional" />
+        <xsd:attribute name="unique" type="booleanExp" />
+        <xsd:attribute name="clustered" type="booleanExp" />
+        <xsd:attribute name="tablespace" type="xsd:string" />
+    </xsd:attributeGroup>
+
+
+    <xsd:element name="addPrimaryKey">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="columnNames" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="constraintName" type="xsd:string" />
+            <xsd:attribute name="tablespace" type="xsd:string" />
+            <xsd:attribute name="clustered" type="booleanExp" />
+            <xsd:attribute name="forIndexCatalogName" type="xsd:string" />
+            <xsd:attribute name="forIndexSchemaName" type="xsd:string" />
+            <xsd:attribute name="forIndexName" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropPrimaryKey">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="constraintName" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addUniqueConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="columnNames" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="constraintName" type="xsd:string" />
+            <xsd:attribute name="tablespace" type="xsd:string" />
+            <xsd:attribute name="disabled" type="booleanExp" />
+            <xsd:attribute name="deferrable" type="booleanExp" />
+            <xsd:attribute name="initiallyDeferred" type="booleanExp" />
+            <xsd:attribute name="forIndexCatalogName" type="xsd:string" />
+            <xsd:attribute name="forIndexSchemaName" type="xsd:string" />
+            <xsd:attribute name="forIndexName" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropUniqueConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="constraintName" type="xsd:string" />
+            <xsd:attribute name="uniqueColumns" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="modifyDataType">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="columnName" type="xsd:string" use="required" />
+            <xsd:attribute name="newDataType" type="xsd:string" use="required" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addLookupTable">
+        <xsd:complexType>
+            <xsd:attribute name="existingTableCatalogName" type="xsd:string" />
+            <xsd:attribute name="existingTableSchemaName" type="xsd:string" />
+            <xsd:attribute name="existingTableName" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="existingColumnName" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="newTableCatalogName" type="xsd:string" />
+            <xsd:attribute name="newTableSchemaName" type="xsd:string" />
+            <xsd:attribute name="newTableName" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="newColumnName" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="newColumnDataType" type="xsd:string" />
+            <xsd:attribute name="constraintName" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addAutoIncrement">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="columnName" type="xsd:string" use="required" />
+            <xsd:attribute name="columnDataType" type="xsd:string" />
+            <xsd:attribute name="startWith" type="xsd:long" />
+            <xsd:attribute name="incrementBy" type="xsd:long" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addDefaultValue">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="columnName" type="xsd:string" use="required" />
+            <xsd:attribute name="columnDataType" type="xsd:string" />
+            <xsd:attribute name="defaultValue" type="xsd:string" />
+            <xsd:attribute name="defaultValueNumeric" type="xsd:string" />
+            <xsd:attribute name="defaultValueDate" type="xsd:string" />
+            <xsd:attribute name="defaultValueBoolean" type="xsd:string" />
+            <xsd:attribute name="defaultValueComputed" type="xsd:string" />
+            <xsd:attribute name="defaultValueSequenceNext" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropDefaultValue">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="columnName" type="xsd:string" use="required" />
+            <xsd:attribute name="columnDataType" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="loadData">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element name="column" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="index" type="integerExp" />
+                        <xsd:attribute name="header" type="xsd:string" />
+                        <xsd:attribute name="name" type="xsd:string" />
+                        <xsd:attribute name="type" type="xsd:string" />
+                        <xsd:attribute name="defaultValue" type="xsd:string" />
+                        <xsd:attribute name="defaultValueNumeric" type="xsd:string" />
+                        <xsd:attribute name="defaultValueDate" type="xsd:string" />
+                        <xsd:attribute name="defaultValueBoolean" type="booleanExp" />
+                        <xsd:attribute name="defaultValueComputed" type="xsd:string" />
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="file" type="xsd:string" />
+            <xsd:attribute name="relativeToChangelogFile" type="booleanExp" />
+            <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
+            <xsd:attribute name="separator" type="xsd:string" default=","/>
+            <xsd:attribute name="quotchar" type="xsd:string" default="&quot;"/>
+            <xsd:attribute name="commentLineStartsWith" type="xsd:string" default="#" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="loadUpdateData">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element name="column" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="index" type="integerExp" />
+                        <xsd:attribute name="header" type="xsd:string" />
+                        <xsd:attribute name="name" type="xsd:string" />
+                        <xsd:attribute name="type" type="xsd:string" />
+                        <xsd:attribute name="defaultValue" type="xsd:string" />
+                        <xsd:attribute name="defaultValueNumeric" type="xsd:string" />
+                        <xsd:attribute name="defaultValueDate" type="xsd:string" />
+                        <xsd:attribute name="defaultValueBoolean" type="booleanExp" />
+                        <xsd:attribute name="defaultValueComputed" type="xsd:string" />
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="file" type="xsd:string" />
+            <xsd:attribute name="relativeToChangelogFile" type="booleanExp" />
+            <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
+            <xsd:attribute name="primaryKey" type="xsd:string" use="required" />
+            <xsd:attribute name="onlyUpdate" type="xsd:boolean" default="false" />
+            <xsd:attribute name="separator" type="xsd:string" default=","/>
+            <xsd:attribute name="quotchar" type="xsd:string" default="&quot;"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:simpleType name="fkCascadeActionOptions">
+        <xsd:restriction base="xsd:token">
+            <xsd:enumeration value="CASCADE"></xsd:enumeration>
+            <xsd:enumeration value="SET NULL"></xsd:enumeration>
+            <xsd:enumeration value="SET DEFAULT"></xsd:enumeration>
+            <xsd:enumeration value="RESTRICT"></xsd:enumeration>
+            <xsd:enumeration value="NO ACTION"></xsd:enumeration>
+        </xsd:restriction>
+    </xsd:simpleType>
+
+    <xsd:attributeGroup name="addForeignKeyConstraintAttrib">
+        <xsd:attribute name="baseTableCatalogName" type="xsd:string" />
+        <xsd:attribute name="baseTableSchemaName" type="xsd:string" />
+        <xsd:attribute name="baseTableName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="baseColumnNames" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="constraintName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="referencedTableCatalogName" type="xsd:string" />
+        <xsd:attribute name="referencedTableSchemaName" type="xsd:string" />
+        <xsd:attribute name="referencedTableName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="referencedColumnNames" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="deferrable" type="booleanExp" />
+        <xsd:attribute name="initiallyDeferred" type="booleanExp" />
+        <xsd:attribute name="deleteCascade" type="booleanExp" />
+        <xsd:attribute name="onDelete" type="fkCascadeActionOptions" />
+        <xsd:attribute name="onUpdate" type="fkCascadeActionOptions" />
+        <xsd:attribute name="referencesUniqueColumn" type="booleanExp" />
+    </xsd:attributeGroup>
+
+    <xsd:attributeGroup name="addNotNullConstraintAttrib">
+        <xsd:attributeGroup ref="tableNameAttribute" />
+        <xsd:attribute name="columnName" type="xsd:string" use="required" />
+        <xsd:attribute name="defaultNullValue" type="xsd:string" />
+        <xsd:attribute name="columnDataType" type="xsd:string" />
+        <xsd:attribute name="constraintName" type="xsd:string"/>
+    </xsd:attributeGroup>
+
+
+    <xsd:element name="addNotNullConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="addNotNullConstraintAttrib" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="addForeignKeyConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="addForeignKeyConstraintAttrib" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="dbmsAttrib">
+        <xsd:attribute name="type" type="xsd:string" use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:element name="dbms">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="dbmsAttrib" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="changeSetExecuted">
+        <xsd:complexType>
+            <xsd:attribute name="id" type="xsd:string" use="required" />
+            <xsd:attribute name="author" type="xsd:string" use="required" />
+            <xsd:attribute name="changeLogFile" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="tableExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="tableName" type="xsd:string" use="required" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="columnExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="tableName" type="xsd:string" use="required" />
+            <xsd:attribute name="columnName" type="xsd:string" use="required" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="sequenceExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="sequenceName" type="xsd:string"
+                           use="required" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="foreignKeyConstraintExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="foreignKeyTableName" type="xsd:string" />
+            <xsd:attribute name="foreignKeyName" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="indexExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="indexName" type="xsd:string"/>
+            <xsd:attribute name="tableName" type="xsd:string" />
+            <xsd:attribute name="columnNames" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="rowCount">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="tableName" type="xsd:string" />
+            <xsd:attribute name="expectedRows" type="xsd:int" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="tableIsEmpty">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="tableName" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="changeLogPropertyDefined">
+        <xsd:complexType>
+            <xsd:attribute name="property" type="xsd:string" use="required" />
+            <xsd:attribute name="value" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="primaryKeyExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="primaryKeyName" type="xsd:string" />
+            <xsd:attribute name="tableName" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="viewExists">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="viewName" type="xsd:string" use="required" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="sqlCheck">
+        <xsd:complexType mixed="true">
+            <xsd:attribute name="expectedResult" type="xsd:string"
+                           use="required" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="customPrecondition">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="param" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="name" type="xsd:string" use="required" />
+                        <xsd:attribute name="value" type="xsd:string" use="required" />
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attribute name="className" type="xsd:string" use="required" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="and">
+        <xsd:complexType>
+            <xsd:choice>
+                <xsd:group ref="PreConditionChildren" minOccurs="1"
+                           maxOccurs="unbounded" />
+            </xsd:choice>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="or">
+        <xsd:complexType>
+            <xsd:choice>
+                <xsd:group ref="PreConditionChildren" minOccurs="1"
+                           maxOccurs="unbounded" />
+            </xsd:choice>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="not">
+        <xsd:complexType>
+            <xsd:choice>
+                <xsd:group ref="PreConditionChildren" minOccurs="1"
+                           maxOccurs="unbounded" />
+            </xsd:choice>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="runningAsAttrib">
+        <xsd:attribute name="username" type="xsd:string" use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:element name="runningAs">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="runningAsAttrib" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="objectQuotingStrategyAttrib">
+        <xsd:attribute name="strategy" type="xsd:string" use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:element name="expectedQuotingStrategy">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="objectQuotingStrategyAttrib" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="dropForeignKeyConstraintAttrib">
+        <xsd:attribute name="baseTableCatalogName" type="xsd:string" />
+        <xsd:attribute name="baseTableSchemaName" type="xsd:string" />
+        <xsd:attribute name="baseTableName" type="xsd:string"
+                       use="required" />
+        <xsd:attribute name="constraintName" type="xsd:string" />
+    </xsd:attributeGroup>
+
+    <xsd:element name="dropForeignKeyConstraint">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="dropForeignKeyConstraintAttrib" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:attributeGroup name="dropAllForeignKeyConstraintsAttrib">
+        <xsd:attribute name="baseTableCatalogName" type="xsd:string" />
+        <xsd:attribute name="baseTableSchemaName" type="xsd:string" />
+        <xsd:attribute name="baseTableName" type="xsd:string"
+                       use="required" />
+    </xsd:attributeGroup>
+
+    <xsd:element name="dropAllForeignKeyConstraints">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="dropAllForeignKeyConstraintsAttrib" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropNotNullConstraint">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="tableName" type="xsd:string" use="required" />
+            <xsd:attribute name="columnName" type="xsd:string" use="required" />
+            <xsd:attribute name="columnDataType" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="setTableRemarks">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="tableName" type="xsd:string" use="required" />
+            <xsd:attribute name="remarks" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="setColumnRemarks">
+        <xsd:complexType>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="tableName" type="xsd:string" use="required" />
+            <xsd:attribute name="columnName" type="xsd:string" use="required" />
+            <xsd:attribute name="remarks" type="xsd:string"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="constraints">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="constraintsAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+
+    <xsd:element name="column">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="constraints" minOccurs="0" />
+            </xsd:sequence>
+            <xsd:attributeGroup ref="column" />
+            <xsd:anyAttribute namespace="##other" processContents="lax" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="param">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="param" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- Children for createTable -->
+    <xsd:element name="createTable">
+        <xsd:complexType>
+            <xsd:choice maxOccurs="unbounded">
+                <xsd:element ref="column" minOccurs="1" maxOccurs="unbounded" />
+                <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded" />
+            </xsd:choice>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="tablespace" type="xsd:string" />
+            <xsd:attribute name="remarks" type="xsd:string" />
+            <xsd:anyAttribute namespace="##other" processContents="lax"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- Children for createView -->
+    <xsd:element name="createView">
+        <xsd:complexType>
+            <xsd:simpleContent>
+                <xsd:extension base="xsd:string">
+                    <xsd:attribute name="catalogName" type="xsd:string" />
+                    <xsd:attribute name="schemaName" type="xsd:string" />
+                    <xsd:attribute name="viewName" type="xsd:string" use="required" />
+                    <xsd:attribute name="replaceIfExists" type="booleanExp" />
+                    <xsd:attribute name="fullDefinition" type="booleanExp" />
+                </xsd:extension>
+            </xsd:simpleContent>
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- Children for insert -->
+    <xsd:element name="insert">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element ref="column" maxOccurs="unbounded" />
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="dbms" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="update">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="column" minOccurs="1" maxOccurs="unbounded" />
+                <xsd:element name="where" minOccurs="0" maxOccurs="1"/>
+                <xsd:element ref="whereParams" minOccurs="0" maxOccurs="1" />
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="whereParams">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="param" minOccurs="1" maxOccurs="unbounded" />
+            </xsd:sequence>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="delete">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element name="where" minOccurs="0" maxOccurs="1" />
+                <xsd:element ref="whereParams" minOccurs="0" maxOccurs="1" />
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- Children for addColum -->
+    <xsd:element name="addColumn">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="column" minOccurs="1" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:complexContent mixed="true">
+                            <xsd:extension base="columnType">
+                                <xsd:attribute name="beforeColumn" type="xsd:string" />
+                                <xsd:attribute name="afterColumn" type="xsd:string" />
+                                <xsd:attribute name="position" type="xsd:integer" />
+                            </xsd:extension>
+                        </xsd:complexContent>
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="rollback">
+        <xsd:complexType mixed="true">
+            <xsd:choice>
+                <xsd:group ref="changeSetChildren" minOccurs="0"
+                           maxOccurs="unbounded" />
+            </xsd:choice>
+            <xsd:attribute name="changeSetPath" type="xsd:string" />
+            <xsd:attribute name="changeSetAuthor" type="xsd:string" />
+            <xsd:attribute name="changeSetId" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- comment  -->
+    <xsd:element name="comment" type="xsd:string" />
+
+    <!-- sql -->
+    <xsd:element name="sql">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="comment" minOccurs="0" maxOccurs="1" />
+            </xsd:sequence>
+            <xsd:attribute name="stripComments" type="booleanExp" />
+            <xsd:attribute name="splitStatements" type="booleanExp" />
+            <xsd:attribute name="endDelimiter" type="xsd:string" />
+            <xsd:attribute name="dbms" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="createProcedure">
+        <xsd:complexType mixed="true">
+            <xsd:sequence>
+                <xsd:element ref="comment" minOccurs="0" maxOccurs="1" />
+            </xsd:sequence>
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+            <xsd:attribute name="procedureName" type="xsd:string" />
+            <xsd:attribute name="path" type="xsd:string" />
+            <xsd:attribute name="encoding" type="xsd:string" />
+            <xsd:attribute name="relativeToChangelogFile" type="booleanExp" />
+            <xsd:attribute name="dbms" type="xsd:string" />
+            <xsd:attribute name="replaceIfExists" type="xsd:boolean" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="executeCommand">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="arg" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType>
+                        <xsd:attribute name="value" type="xsd:string" use="required" />
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attribute name="executable" type="xsd:string" use="required" />
+            <xsd:attribute name="os" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="sqlFile">
+        <xsd:complexType>
+            <xsd:attribute name="path" type="xsd:string" use="required" />
+            <xsd:attribute name="stripComments" type="booleanExp" />
+            <xsd:attribute name="splitStatements" type="booleanExp" />
+            <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
+            <xsd:attribute name="endDelimiter" type="xsd:string" />
+            <xsd:attribute name="relativeToChangelogFile" type="booleanExp" />
+            <xsd:attribute name="dbms" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="tagDatabase">
+        <xsd:complexType>
+            <xsd:attribute name="tag" type="xsd:string" use="required" />
+            <xsd:anyAttribute namespace="##other"  processContents="lax"/>
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="stop">
+        <xsd:complexType mixed="true" />
+    </xsd:element>
+
+    <xsd:element name="empty"/>
+
+    <xsd:element name="output">
+        <xsd:complexType mixed="true" >
+            <xsd:attribute name="target" type="xsd:string" />
+        </xsd:complexType>
+
+    </xsd:element>
+
+    <!-- renameTable -->
+    <xsd:element name="renameTable">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="renameTableAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="renameView">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="renameViewAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- dropTable -->
+    <xsd:element name="dropTable">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="dropTableAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropView">
+        <xsd:complexType>
+            <xsd:attribute name="viewName" type="xsd:string" use="required" />
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropProcedure">
+        <xsd:complexType>
+            <xsd:attribute name="procedureName" type="xsd:string" use="required" />
+            <xsd:attribute name="catalogName" type="xsd:string" />
+            <xsd:attribute name="schemaName" type="xsd:string" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <!-- renameColumn -->
+    <xsd:element name="renameColumn">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="renameColumnAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropColumn">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="column" minOccurs="0" maxOccurs="unbounded" type="columnType" />
+            </xsd:sequence>
+            <xsd:attributeGroup ref="dropColumnAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="mergeColumns">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attribute name="column1Name" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="joinString" type="xsd:string" use="required" />
+            <xsd:attribute name="column2Name" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="finalColumnName" type="xsd:string"
+                           use="required" />
+            <xsd:attribute name="finalColumnType" type="xsd:string"
+                           use="required" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="createSequence">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="sequenceAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="alterSequence">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="sequenceAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropSequence">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="sequenceAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="renameSequence">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="renameSequenceAttributes" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="createIndex">
+        <xsd:complexType>
+            <xsd:choice maxOccurs="unbounded">
+                <xsd:element ref="column" maxOccurs="unbounded" />
+                <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded" />
+            </xsd:choice>
+            <xsd:attributeGroup ref="createIndex" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="dropIndex">
+        <xsd:complexType>
+            <xsd:attributeGroup ref="tableNameAttribute" />
+            <xsd:attributeGroup ref="indexName" />
+            <xsd:attribute name="associatedWith" type="xsd:string" use="optional" />
+        </xsd:complexType>
+    </xsd:element>
+
+    <xsd:element name="customChange">
+        <xsd:complexType>
+            <xsd:sequence>
+                <xsd:element name="param" minOccurs="0" maxOccurs="unbounded">
+                    <xsd:complexType mixed="true">
+                        <xsd:attribute name="name" type="xsd:string" use="required" />
+                        <xsd:attribute name="value" type="xsd:string" />
+                    </xsd:complexType>
+                </xsd:element>
+            </xsd:sequence>
+            <xsd:attribute name="class" type="xsd:string" use="required" />
+            <xsd:anyAttribute processContents="lax" />
+        </xsd:complexType>
+    </xsd:element>
+
+
+    <!-- Children for changeSet -->
+    <xsd:group name="changeSetChildren">
+        <xsd:choice>
+            <xsd:element ref="comment" maxOccurs="1" />
+            <xsd:element ref="createTable" maxOccurs="unbounded" />
+            <xsd:element ref="dropTable" maxOccurs="unbounded" />
+            <xsd:element ref="createView" maxOccurs="unbounded" />
+            <xsd:element ref="renameView" maxOccurs="unbounded" />
+            <xsd:element ref="dropView" maxOccurs="unbounded" />
+            <xsd:element ref="insert" maxOccurs="unbounded" />
+            <xsd:element ref="addColumn" maxOccurs="unbounded" />
+            <xsd:element ref="sql" maxOccurs="unbounded" />
+            <xsd:element ref="createProcedure" maxOccurs="unbounded" />
+            <xsd:element ref="dropProcedure" maxOccurs="unbounded" />
+            <xsd:element ref="sqlFile" maxOccurs="unbounded" />
+            <xsd:element ref="renameTable" maxOccurs="unbounded" />
+            <xsd:element ref="renameColumn" maxOccurs="unbounded" />
+            <xsd:element ref="dropColumn" maxOccurs="unbounded" />
+            <xsd:element ref="mergeColumns" maxOccurs="unbounded" />
+            <xsd:element ref="modifyDataType" maxOccurs="unbounded" />
+            <xsd:element ref="createSequence" maxOccurs="unbounded" />
+            <xsd:element ref="alterSequence" maxOccurs="unbounded" />
+            <xsd:element ref="dropSequence" maxOccurs="unbounded" />
+            <xsd:element ref="renameSequence" maxOccurs="unbounded" />
+            <xsd:element ref="createIndex" maxOccurs="unbounded" />
+            <xsd:element ref="dropIndex" maxOccurs="unbounded" />
+            <xsd:element ref="addNotNullConstraint" maxOccurs="unbounded" />
+            <xsd:element ref="dropNotNullConstraint" maxOccurs="unbounded" />
+            <xsd:element ref="addForeignKeyConstraint" maxOccurs="unbounded" />
+            <xsd:element ref="dropForeignKeyConstraint" maxOccurs="unbounded" />
+            <xsd:element ref="dropAllForeignKeyConstraints"
+                         maxOccurs="unbounded" />
+            <xsd:element ref="addPrimaryKey" maxOccurs="unbounded" />
+            <xsd:element ref="dropPrimaryKey" maxOccurs="unbounded" />
+            <xsd:element ref="addLookupTable" maxOccurs="unbounded" />
+            <xsd:element ref="addAutoIncrement" maxOccurs="unbounded" />
+            <xsd:element ref="addDefaultValue" maxOccurs="unbounded" />
+            <xsd:element ref="dropDefaultValue" maxOccurs="unbounded" />
+            <xsd:element ref="addUniqueConstraint" maxOccurs="unbounded" />
+            <xsd:element ref="dropUniqueConstraint" maxOccurs="unbounded" />
+            <xsd:element ref="setTableRemarks" maxOccurs="unbounded" />
+            <xsd:element ref="setColumnRemarks" maxOccurs="unbounded" />
+            <xsd:element ref="customChange" maxOccurs="unbounded" />
+            <xsd:element ref="update" maxOccurs="unbounded" />
+            <xsd:element ref="delete" maxOccurs="unbounded" />
+            <xsd:element ref="loadData" maxOccurs="unbounded" />
+            <xsd:element ref="loadUpdateData" maxOccurs="unbounded" />
+            <xsd:element ref="executeCommand" maxOccurs="unbounded" />
+            <xsd:element ref="stop" maxOccurs="unbounded" />
+            <xsd:element ref="output" maxOccurs="unbounded" />
+            <xsd:element ref="empty" maxOccurs="unbounded" />
+            <xsd:element ref="rollback" maxOccurs="1" />
+            <xsd:any namespace="##other" processContents="lax" minOccurs="0"
+                     maxOccurs="unbounded" />
+        </xsd:choice>
+    </xsd:group>
+
+    <!-- Children for Precondition -->
+    <xsd:group name="PreConditionChildren">
+        <xsd:sequence>
+            <xsd:choice>
+                <xsd:element ref="and" maxOccurs="unbounded" />
+                <xsd:element ref="or" maxOccurs="unbounded" />
+                <xsd:element ref="not" maxOccurs="unbounded" />
+                <xsd:element ref="dbms" maxOccurs="unbounded" />
+                <xsd:element ref="runningAs" maxOccurs="unbounded" />
+                <xsd:element ref="changeSetExecuted" maxOccurs="unbounded" />
+                <xsd:element ref="tableExists" maxOccurs="unbounded" />
+                <xsd:element ref="columnExists" maxOccurs="unbounded" />
+                <xsd:element ref="sequenceExists" maxOccurs="unbounded" />
+                <xsd:element ref="foreignKeyConstraintExists" maxOccurs="unbounded" />
+                <xsd:element ref="indexExists" maxOccurs="unbounded" />
+                <xsd:element ref="primaryKeyExists" maxOccurs="unbounded" />
+                <xsd:element ref="viewExists" maxOccurs="unbounded" />
+                <xsd:element ref="tableIsEmpty" maxOccurs="unbounded" />
+                <xsd:element ref="rowCount" maxOccurs="unbounded" />
+                <xsd:element ref="sqlCheck" maxOccurs="unbounded" />
+                <xsd:element ref="changeLogPropertyDefined" maxOccurs="unbounded" />
+                <xsd:element ref="expectedQuotingStrategy" maxOccurs="unbounded" />
+                <xsd:element ref="customPrecondition" maxOccurs="unbounded" />
+                <xsd:any namespace="##other" processContents="lax" minOccurs="0"
+                         maxOccurs="unbounded" />
+            </xsd:choice>
+        </xsd:sequence>
+
+    </xsd:group>
+</xsd:schema>
diff --git a/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd b/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd
new file mode 100644
index 0000000..72c12f3
--- /dev/null
+++ b/private/cache/retriever/www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+            targetNamespace="http://www.liquibase.org/xml/ns/dbchangelog-ext"
+            xmlns="http://www.liquibase.org/xml/ns/dbchangelog-ext"
+            elementFormDefault="qualified">
+</xsd:schema>
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..1ad459d 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -1,12 +1,16 @@
 package com.crossover.techtrial.controller;
 
 import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.exceptions.GlobalExceptionHandler;
 import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
+import com.crossover.techtrial.validation.PanelValidator;
+import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
+import javax.validation.Valid;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -17,79 +21,101 @@ import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
 
 /**
  * Panel Controller for all Rest APIs related to Panel.
+ *
  * @author Crossover
  *
  */
-
 @RestController
 public class PanelController {
 
-  @Autowired
-  PanelService panelService;
-  
-  @Autowired
-  HourlyElectricityService hourlyElectricityService;
-  
-  /**
-   * Register a Panel to System and start receiving the electricity statistics.
-   * @param panel to register.
-   * @return
-   */
-  @PostMapping(path = "/api/register")
-  public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
-    panelService.register(panel);
-    return  ResponseEntity.accepted().build();
-  }
-  
-  /**
-   * Controller Method to save hourly Electricity to Database. 
-   * @param panelSerial Serial number of Panel.
-   * @param hourlyElectricity  generated electricity for this panel.
-   * @return
-   */
-  
-  @PostMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> saveHourlyElectricity(
-      @PathVariable(value = "panel-serial") String panelSerial, 
-      @RequestBody HourlyElectricity hourlyElectricity) {
-    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
-  }
-   
-  /**
-   * Get Hourly Electricity from Previous dates.
-   */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
-      @PageableDefault(size = 5,value = 0) Pageable pageable) {
-    Panel panel = panelService.findBySerial(panelSerial);
-    if (panel == null) {
-      return ResponseEntity.notFound().build(); 
+    @Autowired
+    PanelValidator panelValidator;
+
+    @Autowired
+    PanelService panelService;
+
+    @Autowired
+    HourlyElectricityService hourlyElectricityService;
+
+    /**
+     * Register a Panel to System and start receiving the electricity
+     * statistics.
+     *
+     * @param panel to register.
+     * @return
+     */
+    @PostMapping(path = "/api/register")
+    public ResponseEntity<?> registerPanel(@Valid @RequestBody Panel panel) {
+        panel.getSerial();
+    if(panelService.findBySerial(panel.getSerial()) == null) {
+        panelService.register(panel);
+        return ResponseEntity.accepted().build();
+    } else {
+        return  ResponseEntity.badRequest().build();
+    }
+    }
+
+    /**
+     * Controller Method to save hourly Electricity to Database.
+     *
+     * @param panelSerial Serial number of Panel.
+     * @param hourlyElectricity generated electricity for this panel.
+     * @return
+     */
+    @PostMapping(path = "/api/panels/{panel-serial}/hourly")
+    public ResponseEntity<?> saveHourlyElectricity(
+            @PathVariable(value = "panel-serial") String panelSerial,
+            @RequestBody HourlyElectricity hourlyElectricity) {
+        Panel panel = panelService.findBySerial(panelSerial);
+        
+        if(panel != null) {
+            hourlyElectricity.setPanel(panel);
+            return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
+        } else {
+            return ResponseEntity.notFound().build();
+        }
+        
     }
-    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
-        panel.getId(), pageable);
-    return ResponseEntity.ok(page);
-  }
-  
-  /**
-   * This end point is used by Front end charts component to plot the daily statistics of 
-   * electricity generated by this Panel from the day it registered to end of previous day.
-   * @param panelSerial is unique serial for this Panel.
-   * @return
-   */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/daily")
-  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
-      @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
+
     /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
+     * Get Hourly Electricity from Previous dates.
      */
-    return ResponseEntity.ok(dailyElectricityForPanel);
-  }
-}
\ No newline at end of file
+    @GetMapping(path = "/api/panels/{panel-serial}/hourly")
+    public ResponseEntity<?> hourlyElectricity(
+            @PathVariable(value = "panel-serial") String panelSerial,
+            @PageableDefault(size = 5, value = 0) Pageable pageable) {
+        Panel panel = panelService.findBySerial(panelSerial);
+        if (panel == null) {
+            return ResponseEntity.notFound().build();
+        }
+        Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
+                panel.getId(), pageable);
+        return ResponseEntity.ok(page);
+    }
+
+    /**
+     * This end point is used by Front end charts component to plot the daily
+     * statistics of electricity generated by this Panel from the day it
+     * registered to end of previous day.
+     *
+     * @param panelSerial is unique serial for this Panel.
+     * @return
+     */
+    @GetMapping(path = "/api/panels/{panel-serial}/daily")
+    public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
+            @PathVariable(value = "panel-serial") String panelSerial) {
+        Panel panel = panelService.findBySerial(panelSerial);
+        
+        if(panel != null) {
+            List<DailyElectricity> dailyElectricityForPanel = hourlyElectricityService.retrieveDailyHistorical(panel);
+            return ResponseEntity.ok(dailyElectricityForPanel);
+        } else {
+            return ResponseEntity.notFound().build();
+        }
+        
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
index b0e0ea9..d44c85e 100644
--- a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
@@ -2,6 +2,8 @@ package com.crossover.techtrial.dto;
 
 import java.io.Serializable;
 import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.Date;
 
 /**
  * DailyElectricity class will hold sum, average,minimum and maximum electricity for a given day.
@@ -13,7 +15,7 @@ public class DailyElectricity implements Serializable {
   
   private static final long serialVersionUID = 3605549122072628877L;
 
-  private LocalDate date;
+  private Date date;
   
   private Long sum;
   
@@ -23,11 +25,27 @@ public class DailyElectricity implements Serializable {
   
   private Long max;
 
-  public LocalDate getDate() {
+    public DailyElectricity(Date date, Long sum, Double average, Long min, Long max) {
+        this.date = date;
+        this.sum = sum;
+        this.average = average;
+        this.min = min;
+        this.max = max;
+    }
+  
+//  public DailyElectricity(Long sum, Long min, Long max, Double average, LocalDate date) {
+//        this.date = date;
+//        this.sum = sum;
+//        this.average = average;
+//        this.min = min;
+//        this.max = max;
+//    }
+
+  public Date getDate() {
     return date;
   }
 
-  public void setDate(LocalDate date) {
+  public void setDate(Date date) {
     this.date = date;
   }
 
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..e467774 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -7,7 +7,13 @@ import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.Table;
+import javax.persistence.UniqueConstraint;
+import javax.validation.constraints.DecimalMax;
+import javax.validation.constraints.DecimalMin;
+import javax.validation.constraints.Digits;
 import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+import org.hibernate.validator.constraints.Length;
 import org.springframework.lang.Nullable;
 
 /**
@@ -28,11 +34,14 @@ public class Panel implements Serializable {
 
   @NotNull
   @Column(name = "serial")
+  @Size(min = 16, max = 16, message = "The serial length must be 16 characters")
   String serial;
 
+  @Digits(integer = 3, fraction = 6)
   @Column(name = "longitude")
   Double longitude;
 
+  @Digits(integer = 3, fraction = 6)
   @Column(name = "latitude")
   Double latitude;
 
diff --git a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
index b883493..27439e0 100644
--- a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
@@ -1,8 +1,12 @@
 package com.crossover.techtrial.repository;
 
+import com.crossover.techtrial.dto.DailyElectricity;
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import java.util.List;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.data.rest.core.annotation.RestResource;
 
@@ -14,4 +18,12 @@ import org.springframework.data.rest.core.annotation.RestResource;
 public interface HourlyElectricityRepository 
     extends PagingAndSortingRepository<HourlyElectricity,Long> {
   Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+  
+  @Query("SELECT new com.crossover.techtrial.dto.DailyElectricity(DATE(readingAt), SUM(generatedElectricity),"
+          + " AVG(generatedElectricity), MIN(generatedElectricity), MAX(generatedElectricity)) "
+          + "FROM HourlyElectricity WHERE panel = ?1 GROUP BY DATE(readingAt) ")
+  List<DailyElectricity> retrieveDailyHistorical(Panel panel);
+  
+  
+  void deleteAllByPanelId(Long panelId);
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
index dcba8f3..7cbcfb5 100644
--- a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
@@ -12,4 +12,5 @@ import org.springframework.data.rest.core.annotation.RestResource;
 @RestResource(exported = false)
 public interface PanelRepository extends PagingAndSortingRepository<Panel, Long> {
   Panel findBySerial(String serial);
+  
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
index 70c40b7..f817f3a 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
@@ -1,6 +1,9 @@
 package com.crossover.techtrial.service;
 
+import com.crossover.techtrial.dto.DailyElectricity;
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import java.util.List;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
@@ -13,4 +16,10 @@ public interface HourlyElectricityService {
   HourlyElectricity save(HourlyElectricity hourlyElectricity);
   
   Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
+  
+  List<DailyElectricity> retrieveDailyHistorical(Panel panel);
+  
+  void deleteAllHourlyElectricityByPanelId(Long panelId);
+  
+  
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
index 6634e49..cf54315 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
@@ -1,7 +1,10 @@
 package com.crossover.techtrial.service;
 
+import com.crossover.techtrial.dto.DailyElectricity;
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.repository.HourlyElectricityRepository;
+import java.util.List;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
@@ -14,18 +17,26 @@ import org.springframework.stereotype.Service;
  * @author Crossover
  *
  */
-
 @Service
 public class HourlyElectricityServiceImpl implements HourlyElectricityService {
-  @Autowired
-  HourlyElectricityRepository hourlyElectricityRepository;
-  
-  public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
-    return hourlyElectricityRepository.save(hourlyElectricity);
-  }
-  
-  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
-    return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
-  }
-  
-}
\ No newline at end of file
+
+    @Autowired
+    HourlyElectricityRepository hourlyElectricityRepository;
+
+    public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
+        return hourlyElectricityRepository.save(hourlyElectricity);
+    }
+
+    public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
+        return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
+    }
+
+    public List<DailyElectricity> retrieveDailyHistorical(Panel panel) {
+        return hourlyElectricityRepository.retrieveDailyHistorical(panel);
+    }
+
+    public void deleteAllHourlyElectricityByPanelId(Long panelId) {
+        hourlyElectricityRepository.deleteAllByPanelId(panelId);
+    }
+
+}
diff --git a/src/main/java/com/crossover/techtrial/service/PanelService.java b/src/main/java/com/crossover/techtrial/service/PanelService.java
index b1ba940..71b0a49 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelService.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelService.java
@@ -17,4 +17,6 @@ public interface PanelService {
   void register(Panel panel);
   
   Panel findBySerial(String serial);
+  
+  void delete(Panel panel);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
index 48649de..e4da95e 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
@@ -29,4 +29,8 @@ public class PanelServiceImpl implements PanelService {
   public Panel findBySerial(String serial) {
     return panelRepository.findBySerial(serial);
   }
+
+    public void delete(Panel panel) {
+        panelRepository.delete(panel);
+    }
 }
diff --git a/src/main/java/com/crossover/techtrial/validation/PanelValidator.java b/src/main/java/com/crossover/techtrial/validation/PanelValidator.java
new file mode 100644
index 0000000..487e272
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/validation/PanelValidator.java
@@ -0,0 +1,33 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.crossover.techtrial.validation;
+
+import com.crossover.techtrial.model.Panel;
+import org.springframework.stereotype.Component;
+import org.springframework.validation.Errors;
+import org.springframework.validation.Validator;
+
+/**
+ *
+ * @author jbaquero
+ */
+@Component
+public class PanelValidator implements Validator {
+
+    @Override
+    public boolean supports(Class<?> type) {
+        return Panel.class.equals(type);
+    }
+
+    @Override
+    public void validate(Object o, Errors errors) {
+        Panel panel = (Panel) o;
+        if(panel.getSerial() != null && panel.getSerial().length() != 16) {
+            errors.rejectValue("serial", "The serial length must be 16 characters!");
+        }
+    }
+    
+}
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..3c71ada 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1,8 +1,8 @@
 #PLEASE TRY NOT TO CHANGE SETTINGS AND USE APPROPRIATE ENV VARIABLES and DATABASE NAME AS CONFIGURED BELOW
 #Database connection Parameters
-spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
-spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.url: jdbc:mysql://173.82.104.122:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
+spring.datasource.username=crossover
+spring.datasource.password=Colombia2014*
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
diff --git a/src/main/resources/db/changelog/db.changelog-1.1.xml b/src/main/resources/db/changelog/db.changelog-1.1.xml
new file mode 100644
index 0000000..61a94f3
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-1.1.xml
@@ -0,0 +1,40 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <changeSet author="crossover" id="1001122001_recreate_tables">
+        <createTable tableName="panel">
+            <column autoIncrement="true" name="id" type="BIGINT">
+                <constraints primaryKey="true" primaryKeyName="pk_panel"/>
+            </column>
+            <column name="serial" type="VARCHAR(255)">
+                <constraints nullable="false" unique="true"/>
+            </column>
+            <column name="latitude" type="DOUBLE(9,6)"/>
+            <column name="longitude" type="DOUBLE(9,6)"/>
+            <column name="brand" type="VARCHAR(255)"/>
+        </createTable>
+        <createTable tableName="hourly_electricity">
+            <column autoIncrement="true" name="id" type="BIGINT">
+                <constraints primaryKey="true" primaryKeyName="pk_hourly_electricity"/>
+            </column>
+            <column name="panel_id" type="BIGINT"/>
+            <column name="generated_electricity" type="BIGINT"/>
+            <column name="reading_at" type="datetime"/>
+        </createTable>
+    </changeSet>
+    <changeSet author="java" id="1001122003">
+       <insert tableName="panel">
+         <column name="id">1</column>
+         <column name="serial">1234567890123456</column>
+         <column name="longitude">51.104394</column>
+         <column name="latitude">16.999671</column>
+         <column name="brand">tesla</column>
+         </insert>
+     </changeSet>
+     <changeSet author="java" id="1001122004">
+       <insert tableName="hourly_electricity">
+         <column name="panel_id">1</column>
+         <column name="generated_electricity">100</column>
+         <column name="reading_at">2018-01-31 09:00:00</column>
+         </insert>
+     </changeSet>
+</databaseChangeLog>
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
index ea61ac5..8bfdf47 100755
--- a/src/main/resources/db/changelog/db.changelog-master.xml
+++ b/src/main/resources/db/changelog/db.changelog-master.xml
@@ -2,5 +2,5 @@
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
-  <include file="db/changelog/db.changelog-1.0.xml"/>
+  <include file="db/changelog/db.changelog-1.1.xml" />
 </databaseChangeLog>
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..0355549 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,6 +1,9 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -9,6 +12,7 @@ import org.mockito.Mock;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
@@ -35,6 +39,7 @@ public class PanelControllerTest {
   @Mock
   private PanelController panelController;
   
+  
   @Autowired
   private TestRestTemplate template;
 
@@ -43,16 +48,125 @@ public class PanelControllerTest {
     mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
   }
 
+  
+  /*
+    registerPanel method TESTS
+     
+   */
+  
   @Test
   public void testPanelShouldBeRegistered() throws Exception {
     HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
+        "{\"serial\": \"5463728981235864\", \"longitude\": \"54.12336\"," 
             + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
     ResponseEntity<Panel> response = template.postForEntity(
         "/api/register", panel, Panel.class);
     Assert.assertEquals(202,response.getStatusCode().value());
   }
 
+  @Test
+  public void testPanelSerialLengthValidation() throws Exception {
+    HttpEntity<Object> panel = getHttpEntity(
+        "{\"serial\": \"54637289812329\", \"longitude\": \"54.123236\"," 
+            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
+    ResponseEntity<Panel> response = template.postForEntity(
+        "/api/register", panel, Panel.class);
+
+    Assert.assertEquals(400,response.getStatusCode().value());
+  }
+  
+  @Test
+  public void testPanelLongitudeSixDecimals() throws Exception {
+    HttpEntity<Object> panel = getHttpEntity(
+        "{\"serial\": \"5463728981234895\", \"longitude\": \"54.12890776\"," 
+            + " \"latitude\": \"54.123092\",\"brand\":\"tesla\" }");
+    ResponseEntity<Panel> response = template.postForEntity(
+        "/api/register", panel, Panel.class);
+
+    Assert.assertEquals(400,response.getStatusCode().value());
+  }
+  
+  @Test
+  public void testPanelLatitudeSixDecimals() throws Exception {
+    HttpEntity<Object> panel = getHttpEntity(
+        "{\"serial\": \"5463728981230452\", \"longitude\": \"54.143876\"," 
+            + " \"latitude\": \"54.12334856\",\"brand\":\"tesla\" }");
+    ResponseEntity<Panel> response = template.postForEntity(
+        "/api/register", panel, Panel.class);
+
+    Assert.assertEquals(400,response.getStatusCode().value());
+  }
+  
+  @Test
+  public void testPanelUniqueSerial() throws Exception {
+    HttpEntity<Object> panel2 = getHttpEntity(
+        "{\"serial\": \"5463728981235864\", \"longitude\": \"54.123876\"," 
+            + " \"latitude\": \"54.123876\",\"brand\":\"tesla\" }");
+    ResponseEntity<Panel> response = template.postForEntity(
+        "/api/register", panel2, Panel.class);
+
+    Assert.assertEquals(400,response.getStatusCode().value());
+  }
+  
+  /*
+    saveHourlyElectricity TESTS
+  */
+  
+  @Test
+  public void testHourlyElectricityShouldBeSave() throws Exception {
+    HttpEntity<Object> hourlyElectricity = getHttpEntity(
+        "{\"generatedElectricity\": \"234\", \"readingAt\": \"2018-02-25T11:00:00\"}");
+    ResponseEntity<HourlyElectricity> response = template.postForEntity(
+        "/api/panels/5463728981235864/hourly", hourlyElectricity, HourlyElectricity.class);
+
+    Assert.assertEquals(200,response.getStatusCode().value());
+  }
+  
+  @Test
+  public void testHourlyElectricityPanelNotFound() throws Exception {
+    HttpEntity<Object> hourlyElectricity = getHttpEntity(
+        "{\"generatedElectricity\": \"234\", \"readingAt\": \"2018-03-25T11:00:00\"}");
+    ResponseEntity<HourlyElectricity> response = template.postForEntity(
+        "/api/panels/3456789054332344/hourly", hourlyElectricity, HourlyElectricity.class);
+
+    Assert.assertEquals(404,response.getStatusCode().value());
+  }
+  
+  
+  @Test
+  public void testGetHourlyElectricity() throws Exception {
+    HttpEntity<Object> panel = getHttpEntity(
+        "{\"serial\": \"5874685210302159\", \"longitude\": \"54.123336\"," 
+            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
+    template.postForEntity(
+        "/api/register", panel, Panel.class);  
+      
+    HttpEntity<Object> hourlyElectricity = getHttpEntity(
+        "{\"generatedElectricity\": \"8569\", \"readingAt\": \"2018-10-30T11:00:00\"}");
+    template.postForEntity(
+        "/api/panels/5874685210302159/hourly", hourlyElectricity, HourlyElectricity.class);
+    HttpEntity<Object> hourlyElectricity2 = getHttpEntity(
+        "{\"generatedElectricity\": \"9658\", \"readingAt\": \"2018-10-30T11:10:00\"}");
+    template.postForEntity(
+        "/api/panels/5874685210302159/hourly", hourlyElectricity2, HourlyElectricity.class);
+    HttpEntity<Object> hourlyElectricity3 = getHttpEntity(
+        "{\"generatedElectricity\": \"2569\", \"readingAt\": \"2018-10-30T11:20:00\"}");
+    template.postForEntity(
+        "/api/panels/5874685210302159/hourly", hourlyElectricity3, HourlyElectricity.class);
+    
+    ResponseEntity<?> response = template.getForEntity("/api/panels/5874685210302159/hourly", HourlyElectricity.class);
+    
+    
+    
+    Assert.assertEquals(200,response.getStatusCode().value());
+  }
+  
+   @Test
+  public void testGetHourlyElectricityPanelNotFound() throws Exception {
+    ResponseEntity<?> response = template.getForEntity("/api/panels/5874685226302159/hourly", HourlyElectricity.class);
+    Assert.assertEquals(404,response.getStatusCode().value());
+  }
+  
   private HttpEntity<Object> getHttpEntity(Object body) {
     HttpHeaders headers = new HttpHeaders();
     headers.setContentType(MediaType.APPLICATION_JSON);
-- 
2.17.1

